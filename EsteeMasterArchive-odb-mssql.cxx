// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#define ODB_MSSQL_QUERY_COLUMNS_DEF
#include "EsteeMasterArchive-odb-mssql.hxx"
#undef ODB_MSSQL_QUERY_COLUMNS_DEF

#include <cassert>
#include <cstring>  // std::memcpy

#include <odb/function-table.hxx>

#include <odb/mssql/traits.hxx>
#include <odb/mssql/database.hxx>
#include <odb/mssql/transaction.hxx>
#include <odb/mssql/connection.hxx>
#include <odb/mssql/statement.hxx>
#include <odb/mssql/statement-cache.hxx>
#include <odb/mssql/simple-object-statements.hxx>
#include <odb/mssql/container-statements.hxx>
#include <odb/mssql/exceptions.hxx>
#include <odb/mssql/simple-object-result.hxx>

namespace odb
{
  // EsteeMaster_Archive
  //

  template struct query_columns<
    ::EsteeMaster,
    id_mssql,
    access::object_traits_impl< ::EsteeMaster_Archive, id_mssql > >;

  template struct query_columns<
    ::EsteeMaster_Archive,
    id_mssql,
    access::object_traits_impl< ::EsteeMaster_Archive, id_mssql > >;

  struct access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mssql::connection&,
      image_type&,
      id_image_type&,
      mssql::binding&,
      mssql::binding&)
    {
    }
  };

  void access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::
  bind (mssql::bind* b,
        image_type& i,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    std::size_t n (0);

    // EsteeMaster base
    //
    object_traits_impl< ::EsteeMaster, id_mssql >::bind (b + n, i, sk);
    n += sk == statement_select ? 28UL : 27UL;

    // ID
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.ID_value;
    b[n].size_ind = &i.ID_size_ind;
    n++;
  }

  void access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::
  init (image_type& i,
        const object_type& o,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    if (i.change_callback_.callback != 0)
      (i.change_callback_.callback) (i.change_callback_.context);

    // EsteeMaster base
    //
    object_traits_impl< ::EsteeMaster, id_mssql >::init (i, o, sk);

    // ID
    //
    {
      int const& v =
        o.ID;

      bool is_null (false);
      mssql::value_traits<
          int,
          mssql::id_int >::set_image (
        i.ID_value, is_null, v);
      i.ID_size_ind = is_null ? SQL_NULL_DATA : 0;
    }
  }

  void access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // EsteeMaster base
    //
    object_traits_impl< ::EsteeMaster, id_mssql >::init (o, i, db);

    // ID
    //
    {
      int& v =
        o.ID;

      mssql::value_traits<
          int,
          mssql::id_int >::set_value (
        v,
        i.ID_value,
        i.ID_size_ind == SQL_NULL_DATA);
    }
  }

  const char access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::persist_statement[] =
  "INSERT INTO [EsteeMaster_Archive] "
  "([DataFeed_Ticker], "
  "[Underlying_Ticker], "
  "[ISIN], "
  "[Exchange_Code], "
  "[Option_Type], "
  "[Status], "
  "[TOKEN2], "
  "[Expiry_Date2], "
  "[SERIES], "
  "[Source], "
  "[UnderlyingEstee_Id], "
  "[Strike_Price], "
  "[Tick_Size], "
  "[Lot_Size], "
  "[Security_Type], "
  "[Token], "
  "[Quote_Size], "
  "[Instrument_Type], "
  "[TradingCurrency], "
  "[SettlementCurrency], "
  "[TickSizeSlabId], "
  "[AsOfDate], "
  "[Last_update_time], "
  "[Expiry_Date], "
  "[SettlementDate], "
  "[TradingStartDate], "
  "[LastTradingDate], "
  "[ID]) "
  "OUTPUT INSERTED.[Estee_ID] "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::find_statement[] =
  "SELECT "
  "[EsteeMaster_Archive].[DataFeed_Ticker], "
  "[EsteeMaster_Archive].[Underlying_Ticker], "
  "[EsteeMaster_Archive].[ISIN], "
  "[EsteeMaster_Archive].[Exchange_Code], "
  "[EsteeMaster_Archive].[Option_Type], "
  "[EsteeMaster_Archive].[Status], "
  "[EsteeMaster_Archive].[TOKEN2], "
  "[EsteeMaster_Archive].[Expiry_Date2], "
  "[EsteeMaster_Archive].[SERIES], "
  "[EsteeMaster_Archive].[Source], "
  "[EsteeMaster_Archive].[UnderlyingEstee_Id], "
  "[EsteeMaster_Archive].[Strike_Price], "
  "[EsteeMaster_Archive].[Tick_Size], "
  "[EsteeMaster_Archive].[Lot_Size], "
  "[EsteeMaster_Archive].[Security_Type], "
  "[EsteeMaster_Archive].[Token], "
  "[EsteeMaster_Archive].[Quote_Size], "
  "[EsteeMaster_Archive].[Instrument_Type], "
  "[EsteeMaster_Archive].[TradingCurrency], "
  "[EsteeMaster_Archive].[SettlementCurrency], "
  "[EsteeMaster_Archive].[TickSizeSlabId], "
  "[EsteeMaster_Archive].[AsOfDate], "
  "[EsteeMaster_Archive].[Last_update_time], "
  "[EsteeMaster_Archive].[Expiry_Date], "
  "[EsteeMaster_Archive].[SettlementDate], "
  "[EsteeMaster_Archive].[TradingStartDate], "
  "[EsteeMaster_Archive].[LastTradingDate], "
  "[EsteeMaster_Archive].[Estee_ID], "
  "[EsteeMaster_Archive].[ID] "
  "FROM [EsteeMaster_Archive] "
  "WHERE [EsteeMaster_Archive].[Estee_ID]=?";

  const char access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::update_statement[] =
  "UPDATE [EsteeMaster_Archive] "
  "SET "
  "[DataFeed_Ticker]=?, "
  "[Underlying_Ticker]=?, "
  "[ISIN]=?, "
  "[Exchange_Code]=?, "
  "[Option_Type]=?, "
  "[Status]=?, "
  "[TOKEN2]=?, "
  "[Expiry_Date2]=?, "
  "[SERIES]=?, "
  "[Source]=?, "
  "[UnderlyingEstee_Id]=?, "
  "[Strike_Price]=?, "
  "[Tick_Size]=?, "
  "[Lot_Size]=?, "
  "[Security_Type]=?, "
  "[Token]=?, "
  "[Quote_Size]=?, "
  "[Instrument_Type]=?, "
  "[TradingCurrency]=?, "
  "[SettlementCurrency]=?, "
  "[TickSizeSlabId]=?, "
  "[AsOfDate]=?, "
  "[Last_update_time]=?, "
  "[Expiry_Date]=?, "
  "[SettlementDate]=?, "
  "[TradingStartDate]=?, "
  "[LastTradingDate]=?, "
  "[ID]=? "
  "WHERE [Estee_ID]=?";

  const char access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::erase_statement[] =
  "DELETE FROM [EsteeMaster_Archive] "
  "WHERE [Estee_ID]=?";

  const char access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::query_statement[] =
  "SELECT "
  "[EsteeMaster_Archive].[DataFeed_Ticker], "
  "[EsteeMaster_Archive].[Underlying_Ticker], "
  "[EsteeMaster_Archive].[ISIN], "
  "[EsteeMaster_Archive].[Exchange_Code], "
  "[EsteeMaster_Archive].[Option_Type], "
  "[EsteeMaster_Archive].[Status], "
  "[EsteeMaster_Archive].[TOKEN2], "
  "[EsteeMaster_Archive].[Expiry_Date2], "
  "[EsteeMaster_Archive].[SERIES], "
  "[EsteeMaster_Archive].[Source], "
  "[EsteeMaster_Archive].[UnderlyingEstee_Id], "
  "[EsteeMaster_Archive].[Strike_Price], "
  "[EsteeMaster_Archive].[Tick_Size], "
  "[EsteeMaster_Archive].[Lot_Size], "
  "[EsteeMaster_Archive].[Security_Type], "
  "[EsteeMaster_Archive].[Token], "
  "[EsteeMaster_Archive].[Quote_Size], "
  "[EsteeMaster_Archive].[Instrument_Type], "
  "[EsteeMaster_Archive].[TradingCurrency], "
  "[EsteeMaster_Archive].[SettlementCurrency], "
  "[EsteeMaster_Archive].[TickSizeSlabId], "
  "[EsteeMaster_Archive].[AsOfDate], "
  "[EsteeMaster_Archive].[Last_update_time], "
  "[EsteeMaster_Archive].[Expiry_Date], "
  "[EsteeMaster_Archive].[SettlementDate], "
  "[EsteeMaster_Archive].[TradingStartDate], "
  "[EsteeMaster_Archive].[LastTradingDate], "
  "[EsteeMaster_Archive].[Estee_ID], "
  "[EsteeMaster_Archive].[ID] "
  "FROM [EsteeMaster_Archive]";

  const char access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::erase_query_statement[] =
  "DELETE FROM [EsteeMaster_Archive]";

  const char access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::table_name[] =
  "[EsteeMaster_Archive]";

  void access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    init (im, obj, statement_insert);

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.Estee_ID = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;
    using mssql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mssql::transaction& tr (mssql::transaction::current ());
    mssql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.Estee_ID);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    init (im, obj, statement_update);

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::
  erase (database& db, const id_type& id)
  {
    using namespace mssql;

    ODB_POTENTIALLY_UNUSED (db);

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::pointer_type
  access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::
  find (database& db, const id_type& id)
  {
    using namespace mssql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    auto_result ar;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();

      ar.set (sts.find_statement ());
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      st.stream_result ();
      ar.free ();
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);
    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::
  reload (database& db, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.Estee_ID);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mssql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r != select_statement::no_data)
    {
      ar.release ();
      return true;
    }
    else
      return false;
  }

  result< access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::object_type >
  access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mssql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  result< access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::object_type >
  access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::
  query (database& db, const odb::query_base& q)
  {
    return query (db, query_base_type (q));
  }

  unsigned long long access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  unsigned long long access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::
  erase_query (database& db, const odb::query_base& q)
  {
    return erase_query (db, query_base_type (q));
  }

  static const
  access::object_traits_impl< ::EsteeMaster_Archive, id_common >::
  function_table_type function_table_EsteeMaster_Archive_ =
  {
    &access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::persist,
    &access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::find,
    &access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::find,
    &access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::reload,
    &access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::update,
    &access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::erase,
    &access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::erase,
    &access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::query,
    &access::object_traits_impl< ::EsteeMaster_Archive, id_mssql >::erase_query
  };

  static const object_function_table_entry< ::EsteeMaster_Archive, id_mssql >
  function_table_entry_EsteeMaster_Archive_ (
    &function_table_EsteeMaster_Archive_);
}

#include <odb/post.hxx>
