// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#define ODB_MYSQL_QUERY_COLUMNS_DEF
#include "EsteeMaster-odb-mysql.hxx"
#undef ODB_MYSQL_QUERY_COLUMNS_DEF

#include <cassert>
#include <cstring>  // std::memcpy

#include <odb/function-table.hxx>

#include <odb/mysql/traits.hxx>
#include <odb/mysql/database.hxx>
#include <odb/mysql/transaction.hxx>
#include <odb/mysql/connection.hxx>
#include <odb/mysql/statement.hxx>
#include <odb/mysql/statement-cache.hxx>
#include <odb/mysql/simple-object-statements.hxx>
#include <odb/mysql/container-statements.hxx>
#include <odb/mysql/exceptions.hxx>
#include <odb/mysql/simple-object-result.hxx>
#include <odb/mysql/enum.hxx>

namespace odb
{
  // EsteeMaster
  //

  template struct query_columns<
    ::EsteeMaster,
    id_mysql,
    access::object_traits_impl< ::EsteeMaster, id_mysql > >;

  struct access::object_traits_impl< ::EsteeMaster, id_mysql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mysql::connection&,
      image_type&,
      id_image_type&,
      mysql::binding&,
      mysql::binding&)
    {
    }
  };

  access::object_traits_impl< ::EsteeMaster, id_mysql >::id_type
  access::object_traits_impl< ::EsteeMaster, id_mysql >::
  id (const id_image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        id,
        i.id_value,
        i.id_size,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::EsteeMaster, id_mysql >::id_type
  access::object_traits_impl< ::EsteeMaster, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        id,
        i.Estee_ID_value,
        i.Estee_ID_size,
        i.Estee_ID_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::EsteeMaster, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // DataFeed_Ticker
    //
    if (t[0UL])
    {
      i.DataFeed_Ticker_value.capacity (i.DataFeed_Ticker_size);
      grew = true;
    }

    // Underlying_Ticker
    //
    if (t[1UL])
    {
      i.Underlying_Ticker_value.capacity (i.Underlying_Ticker_size);
      grew = true;
    }

    // ISIN
    //
    if (t[2UL])
    {
      i.ISIN_value.capacity (i.ISIN_size);
      grew = true;
    }

    // Exchange_Code
    //
    if (t[3UL])
    {
      i.Exchange_Code_value.capacity (i.Exchange_Code_size);
      grew = true;
    }

    // Option_Type
    //
    if (t[4UL])
    {
      i.Option_Type_value.capacity (i.Option_Type_size);
      grew = true;
    }

    // Status
    //
    if (t[5UL])
    {
      i.Status_value.capacity (i.Status_size);
      grew = true;
    }

    // TOKEN2
    //
    if (t[6UL])
    {
      i.TOKEN2_value.capacity (i.TOKEN2_size);
      grew = true;
    }

    // Expiry_Date2
    //
    if (t[7UL])
    {
      i.Expiry_Date2_value.capacity (i.Expiry_Date2_size);
      grew = true;
    }

    // SERIES
    //
    if (t[8UL])
    {
      i.SERIES_value.capacity (i.SERIES_size);
      grew = true;
    }

    // Source
    //
    if (t[9UL])
    {
      i.Source_value.capacity (i.Source_size);
      grew = true;
    }

    // UnderlyingEstee_Id
    //
    if (t[10UL])
    {
      i.UnderlyingEstee_Id_value.capacity (i.UnderlyingEstee_Id_size);
      grew = true;
    }

    // Strike_Price
    //
    t[11UL] = 0;

    // Tick_Size
    //
    t[12UL] = 0;

    // Lot_Size
    //
    t[13UL] = 0;

    // Security_Type
    //
    t[14UL] = 0;

    // Token
    //
    t[15UL] = 0;

    // Quote_Size
    //
    t[16UL] = 0;

    // Instrument_Type
    //
    t[17UL] = 0;

    // TradingCurrency
    //
    t[18UL] = 0;

    // SettlementCurrency
    //
    t[19UL] = 0;

    // TickSizeSlabId
    //
    t[20UL] = 0;

    // AsOfDate
    //
    t[21UL] = 0;

    // Last_update_time
    //
    t[22UL] = 0;

    // Expiry_Date
    //
    t[23UL] = 0;

    // SettlementDate
    //
    t[24UL] = 0;

    // TradingStartDate
    //
    t[25UL] = 0;

    // LastTradingDate
    //
    t[26UL] = 0;

    // Estee_ID
    //
    if (t[27UL])
    {
      i.Estee_ID_value.capacity (i.Estee_ID_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::EsteeMaster, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // DataFeed_Ticker
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.DataFeed_Ticker_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.DataFeed_Ticker_value.capacity ());
    b[n].length = &i.DataFeed_Ticker_size;
    b[n].is_null = &i.DataFeed_Ticker_null;
    n++;

    // Underlying_Ticker
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.Underlying_Ticker_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.Underlying_Ticker_value.capacity ());
    b[n].length = &i.Underlying_Ticker_size;
    b[n].is_null = &i.Underlying_Ticker_null;
    n++;

    // ISIN
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.ISIN_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.ISIN_value.capacity ());
    b[n].length = &i.ISIN_size;
    b[n].is_null = &i.ISIN_null;
    n++;

    // Exchange_Code
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.Exchange_Code_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.Exchange_Code_value.capacity ());
    b[n].length = &i.Exchange_Code_size;
    b[n].is_null = &i.Exchange_Code_null;
    n++;

    // Option_Type
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.Option_Type_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.Option_Type_value.capacity ());
    b[n].length = &i.Option_Type_size;
    b[n].is_null = &i.Option_Type_null;
    n++;

    // Status
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.Status_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.Status_value.capacity ());
    b[n].length = &i.Status_size;
    b[n].is_null = &i.Status_null;
    n++;

    // TOKEN2
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.TOKEN2_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.TOKEN2_value.capacity ());
    b[n].length = &i.TOKEN2_size;
    b[n].is_null = &i.TOKEN2_null;
    n++;

    // Expiry_Date2
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.Expiry_Date2_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.Expiry_Date2_value.capacity ());
    b[n].length = &i.Expiry_Date2_size;
    b[n].is_null = &i.Expiry_Date2_null;
    n++;

    // SERIES
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.SERIES_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.SERIES_value.capacity ());
    b[n].length = &i.SERIES_size;
    b[n].is_null = &i.SERIES_null;
    n++;

    // Source
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.Source_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.Source_value.capacity ());
    b[n].length = &i.Source_size;
    b[n].is_null = &i.Source_null;
    n++;

    // UnderlyingEstee_Id
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.UnderlyingEstee_Id_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.UnderlyingEstee_Id_value.capacity ());
    b[n].length = &i.UnderlyingEstee_Id_size;
    b[n].is_null = &i.UnderlyingEstee_Id_null;
    n++;

    // Strike_Price
    //
    b[n].buffer_type = MYSQL_TYPE_DOUBLE;
    b[n].buffer = &i.Strike_Price_value;
    b[n].is_null = &i.Strike_Price_null;
    n++;

    // Tick_Size
    //
    b[n].buffer_type = MYSQL_TYPE_DOUBLE;
    b[n].buffer = &i.Tick_Size_value;
    b[n].is_null = &i.Tick_Size_null;
    n++;

    // Lot_Size
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.Lot_Size_value;
    b[n].is_null = &i.Lot_Size_null;
    n++;

    // Security_Type
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.Security_Type_value;
    b[n].is_null = &i.Security_Type_null;
    n++;

    // Token
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.Token_value;
    b[n].is_null = &i.Token_null;
    n++;

    // Quote_Size
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.Quote_Size_value;
    b[n].is_null = &i.Quote_Size_null;
    n++;

    // Instrument_Type
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.Instrument_Type_value;
    b[n].is_null = &i.Instrument_Type_null;
    n++;

    // TradingCurrency
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.TradingCurrency_value;
    b[n].is_null = &i.TradingCurrency_null;
    n++;

    // SettlementCurrency
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.SettlementCurrency_value;
    b[n].is_null = &i.SettlementCurrency_null;
    n++;

    // TickSizeSlabId
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.TickSizeSlabId_value;
    b[n].is_null = &i.TickSizeSlabId_null;
    n++;

    // AsOfDate
    //
    b[n].buffer_type = MYSQL_TYPE_DATETIME;
    b[n].buffer = &i.AsOfDate_value;
    b[n].is_null = &i.AsOfDate_null;
    n++;

    // Last_update_time
    //
    b[n].buffer_type = MYSQL_TYPE_DATETIME;
    b[n].buffer = &i.Last_update_time_value;
    b[n].is_null = &i.Last_update_time_null;
    n++;

    // Expiry_Date
    //
    b[n].buffer_type = MYSQL_TYPE_DATETIME;
    b[n].buffer = &i.Expiry_Date_value;
    b[n].is_null = &i.Expiry_Date_null;
    n++;

    // SettlementDate
    //
    b[n].buffer_type = MYSQL_TYPE_DATETIME;
    b[n].buffer = &i.SettlementDate_value;
    b[n].is_null = &i.SettlementDate_null;
    n++;

    // TradingStartDate
    //
    b[n].buffer_type = MYSQL_TYPE_DATETIME;
    b[n].buffer = &i.TradingStartDate_value;
    b[n].is_null = &i.TradingStartDate_null;
    n++;

    // LastTradingDate
    //
    b[n].buffer_type = MYSQL_TYPE_DATETIME;
    b[n].buffer = &i.LastTradingDate_value;
    b[n].is_null = &i.LastTradingDate_null;
    n++;

    // Estee_ID
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_STRING;
      b[n].buffer = i.Estee_ID_value.data ();
      b[n].buffer_length = static_cast<unsigned long> (
        i.Estee_ID_value.capacity ());
      b[n].length = &i.Estee_ID_size;
      b[n].is_null = &i.Estee_ID_null;
      n++;
    }
  }

  void access::object_traits_impl< ::EsteeMaster, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.id_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.id_value.capacity ());
    b[n].length = &i.id_size;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::EsteeMaster, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // DataFeed_Ticker
    //
    {
      ::std::string const& v =
        o.DataFeed_Ticker;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.DataFeed_Ticker_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.DataFeed_Ticker_value,
        size,
        is_null,
        v);
      i.DataFeed_Ticker_null = is_null;
      i.DataFeed_Ticker_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.DataFeed_Ticker_value.capacity ());
    }

    // Underlying_Ticker
    //
    {
      ::std::string const& v =
        o.Underlying_Ticker;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.Underlying_Ticker_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.Underlying_Ticker_value,
        size,
        is_null,
        v);
      i.Underlying_Ticker_null = is_null;
      i.Underlying_Ticker_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.Underlying_Ticker_value.capacity ());
    }

    // ISIN
    //
    {
      ::std::string const& v =
        o.ISIN;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.ISIN_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.ISIN_value,
        size,
        is_null,
        v);
      i.ISIN_null = is_null;
      i.ISIN_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.ISIN_value.capacity ());
    }

    // Exchange_Code
    //
    {
      ::std::string const& v =
        o.Exchange_Code;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.Exchange_Code_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.Exchange_Code_value,
        size,
        is_null,
        v);
      i.Exchange_Code_null = is_null;
      i.Exchange_Code_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.Exchange_Code_value.capacity ());
    }

    // Option_Type
    //
    {
      ::std::string const& v =
        o.Option_Type;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.Option_Type_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.Option_Type_value,
        size,
        is_null,
        v);
      i.Option_Type_null = is_null;
      i.Option_Type_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.Option_Type_value.capacity ());
    }

    // Status
    //
    {
      ::std::string const& v =
        o.Status;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.Status_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.Status_value,
        size,
        is_null,
        v);
      i.Status_null = is_null;
      i.Status_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.Status_value.capacity ());
    }

    // TOKEN2
    //
    {
      ::std::string const& v =
        o.TOKEN2;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.TOKEN2_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.TOKEN2_value,
        size,
        is_null,
        v);
      i.TOKEN2_null = is_null;
      i.TOKEN2_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.TOKEN2_value.capacity ());
    }

    // Expiry_Date2
    //
    {
      ::std::string const& v =
        o.Expiry_Date2;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.Expiry_Date2_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.Expiry_Date2_value,
        size,
        is_null,
        v);
      i.Expiry_Date2_null = is_null;
      i.Expiry_Date2_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.Expiry_Date2_value.capacity ());
    }

    // SERIES
    //
    {
      ::std::string const& v =
        o.SERIES;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.SERIES_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.SERIES_value,
        size,
        is_null,
        v);
      i.SERIES_null = is_null;
      i.SERIES_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.SERIES_value.capacity ());
    }

    // Source
    //
    {
      ::std::string const& v =
        o.Source;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.Source_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.Source_value,
        size,
        is_null,
        v);
      i.Source_null = is_null;
      i.Source_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.Source_value.capacity ());
    }

    // UnderlyingEstee_Id
    //
    {
      ::std::string const& v =
        o.UnderlyingEstee_Id;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.UnderlyingEstee_Id_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.UnderlyingEstee_Id_value,
        size,
        is_null,
        v);
      i.UnderlyingEstee_Id_null = is_null;
      i.UnderlyingEstee_Id_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.UnderlyingEstee_Id_value.capacity ());
    }

    // Strike_Price
    //
    {
      double const& v =
        o.Strike_Price;

      bool is_null (false);
      mysql::value_traits<
          double,
          mysql::id_double >::set_image (
        i.Strike_Price_value, is_null, v);
      i.Strike_Price_null = is_null;
    }

    // Tick_Size
    //
    {
      double const& v =
        o.Tick_Size;

      bool is_null (false);
      mysql::value_traits<
          double,
          mysql::id_double >::set_image (
        i.Tick_Size_value, is_null, v);
      i.Tick_Size_null = is_null;
    }

    // Lot_Size
    //
    {
      int const& v =
        o.Lot_Size;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.Lot_Size_value, is_null, v);
      i.Lot_Size_null = is_null;
    }

    // Security_Type
    //
    {
      int const& v =
        o.Security_Type;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.Security_Type_value, is_null, v);
      i.Security_Type_null = is_null;
    }

    // Token
    //
    {
      int const& v =
        o.Token;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.Token_value, is_null, v);
      i.Token_null = is_null;
    }

    // Quote_Size
    //
    {
      int const& v =
        o.Quote_Size;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.Quote_Size_value, is_null, v);
      i.Quote_Size_null = is_null;
    }

    // Instrument_Type
    //
    {
      int const& v =
        o.Instrument_Type;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.Instrument_Type_value, is_null, v);
      i.Instrument_Type_null = is_null;
    }

    // TradingCurrency
    //
    {
      int const& v =
        o.TradingCurrency;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.TradingCurrency_value, is_null, v);
      i.TradingCurrency_null = is_null;
    }

    // SettlementCurrency
    //
    {
      int const& v =
        o.SettlementCurrency;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.SettlementCurrency_value, is_null, v);
      i.SettlementCurrency_null = is_null;
    }

    // TickSizeSlabId
    //
    {
      int const& v =
        o.TickSizeSlabId;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.TickSizeSlabId_value, is_null, v);
      i.TickSizeSlabId_null = is_null;
    }

    // AsOfDate
    //
    {
      ::boost::posix_time::ptime const& v =
        o.AsOfDate;

      bool is_null (true);
      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_image (
        i.AsOfDate_value, is_null, v);
      i.AsOfDate_null = is_null;
    }

    // Last_update_time
    //
    {
      ::boost::posix_time::ptime const& v =
        o.Last_update_time;

      bool is_null (true);
      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_image (
        i.Last_update_time_value, is_null, v);
      i.Last_update_time_null = is_null;
    }

    // Expiry_Date
    //
    {
      ::boost::posix_time::ptime const& v =
        o.Expiry_Date;

      bool is_null (true);
      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_image (
        i.Expiry_Date_value, is_null, v);
      i.Expiry_Date_null = is_null;
    }

    // SettlementDate
    //
    {
      ::boost::posix_time::ptime const& v =
        o.SettlementDate;

      bool is_null (true);
      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_image (
        i.SettlementDate_value, is_null, v);
      i.SettlementDate_null = is_null;
    }

    // TradingStartDate
    //
    {
      ::boost::posix_time::ptime const& v =
        o.TradingStartDate;

      bool is_null (true);
      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_image (
        i.TradingStartDate_value, is_null, v);
      i.TradingStartDate_null = is_null;
    }

    // LastTradingDate
    //
    {
      ::boost::posix_time::ptime const& v =
        o.LastTradingDate;

      bool is_null (true);
      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_image (
        i.LastTradingDate_value, is_null, v);
      i.LastTradingDate_null = is_null;
    }

    // Estee_ID
    //
    if (sk == statement_insert)
    {
      ::std::string const& v =
        o.Estee_ID;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.Estee_ID_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.Estee_ID_value,
        size,
        is_null,
        v);
      i.Estee_ID_null = is_null;
      i.Estee_ID_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.Estee_ID_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::EsteeMaster, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // DataFeed_Ticker
    //
    {
      ::std::string& v =
        o.DataFeed_Ticker;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.DataFeed_Ticker_value,
        i.DataFeed_Ticker_size,
        i.DataFeed_Ticker_null);
    }

    // Underlying_Ticker
    //
    {
      ::std::string& v =
        o.Underlying_Ticker;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.Underlying_Ticker_value,
        i.Underlying_Ticker_size,
        i.Underlying_Ticker_null);
    }

    // ISIN
    //
    {
      ::std::string& v =
        o.ISIN;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.ISIN_value,
        i.ISIN_size,
        i.ISIN_null);
    }

    // Exchange_Code
    //
    {
      ::std::string& v =
        o.Exchange_Code;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.Exchange_Code_value,
        i.Exchange_Code_size,
        i.Exchange_Code_null);
    }

    // Option_Type
    //
    {
      ::std::string& v =
        o.Option_Type;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.Option_Type_value,
        i.Option_Type_size,
        i.Option_Type_null);
    }

    // Status
    //
    {
      ::std::string& v =
        o.Status;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.Status_value,
        i.Status_size,
        i.Status_null);
    }

    // TOKEN2
    //
    {
      ::std::string& v =
        o.TOKEN2;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.TOKEN2_value,
        i.TOKEN2_size,
        i.TOKEN2_null);
    }

    // Expiry_Date2
    //
    {
      ::std::string& v =
        o.Expiry_Date2;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.Expiry_Date2_value,
        i.Expiry_Date2_size,
        i.Expiry_Date2_null);
    }

    // SERIES
    //
    {
      ::std::string& v =
        o.SERIES;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.SERIES_value,
        i.SERIES_size,
        i.SERIES_null);
    }

    // Source
    //
    {
      ::std::string& v =
        o.Source;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.Source_value,
        i.Source_size,
        i.Source_null);
    }

    // UnderlyingEstee_Id
    //
    {
      ::std::string& v =
        o.UnderlyingEstee_Id;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.UnderlyingEstee_Id_value,
        i.UnderlyingEstee_Id_size,
        i.UnderlyingEstee_Id_null);
    }

    // Strike_Price
    //
    {
      double& v =
        o.Strike_Price;

      mysql::value_traits<
          double,
          mysql::id_double >::set_value (
        v,
        i.Strike_Price_value,
        i.Strike_Price_null);
    }

    // Tick_Size
    //
    {
      double& v =
        o.Tick_Size;

      mysql::value_traits<
          double,
          mysql::id_double >::set_value (
        v,
        i.Tick_Size_value,
        i.Tick_Size_null);
    }

    // Lot_Size
    //
    {
      int& v =
        o.Lot_Size;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.Lot_Size_value,
        i.Lot_Size_null);
    }

    // Security_Type
    //
    {
      int& v =
        o.Security_Type;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.Security_Type_value,
        i.Security_Type_null);
    }

    // Token
    //
    {
      int& v =
        o.Token;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.Token_value,
        i.Token_null);
    }

    // Quote_Size
    //
    {
      int& v =
        o.Quote_Size;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.Quote_Size_value,
        i.Quote_Size_null);
    }

    // Instrument_Type
    //
    {
      int& v =
        o.Instrument_Type;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.Instrument_Type_value,
        i.Instrument_Type_null);
    }

    // TradingCurrency
    //
    {
      int& v =
        o.TradingCurrency;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.TradingCurrency_value,
        i.TradingCurrency_null);
    }

    // SettlementCurrency
    //
    {
      int& v =
        o.SettlementCurrency;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.SettlementCurrency_value,
        i.SettlementCurrency_null);
    }

    // TickSizeSlabId
    //
    {
      int& v =
        o.TickSizeSlabId;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.TickSizeSlabId_value,
        i.TickSizeSlabId_null);
    }

    // AsOfDate
    //
    {
      ::boost::posix_time::ptime& v =
        o.AsOfDate;

      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_value (
        v,
        i.AsOfDate_value,
        i.AsOfDate_null);
    }

    // Last_update_time
    //
    {
      ::boost::posix_time::ptime& v =
        o.Last_update_time;

      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_value (
        v,
        i.Last_update_time_value,
        i.Last_update_time_null);
    }

    // Expiry_Date
    //
    {
      ::boost::posix_time::ptime& v =
        o.Expiry_Date;

      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_value (
        v,
        i.Expiry_Date_value,
        i.Expiry_Date_null);
    }

    // SettlementDate
    //
    {
      ::boost::posix_time::ptime& v =
        o.SettlementDate;

      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_value (
        v,
        i.SettlementDate_value,
        i.SettlementDate_null);
    }

    // TradingStartDate
    //
    {
      ::boost::posix_time::ptime& v =
        o.TradingStartDate;

      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_value (
        v,
        i.TradingStartDate_value,
        i.TradingStartDate_null);
    }

    // LastTradingDate
    //
    {
      ::boost::posix_time::ptime& v =
        o.LastTradingDate;

      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_value (
        v,
        i.LastTradingDate_value,
        i.LastTradingDate_null);
    }

    // Estee_ID
    //
    {
      ::std::string& v =
        o.Estee_ID;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.Estee_ID_value,
        i.Estee_ID_size,
        i.Estee_ID_null);
    }
  }

  void access::object_traits_impl< ::EsteeMaster, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    bool grew (false);
    {
      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.id_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.id_value,
        size,
        is_null,
        id);
      i.id_null = is_null;
      i.id_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.id_value.capacity ());
    }

    if (grew)
      i.version++;
  }

  const char access::object_traits_impl< ::EsteeMaster, id_mysql >::persist_statement[] =
  "INSERT INTO `EsteeMaster` "
  "(`DataFeed_Ticker`, "
  "`Underlying_Ticker`, "
  "`ISIN`, "
  "`Exchange_Code`, "
  "`Option_Type`, "
  "`Status`, "
  "`TOKEN2`, "
  "`Expiry_Date2`, "
  "`SERIES`, "
  "`Source`, "
  "`UnderlyingEstee_Id`, "
  "`Strike_Price`, "
  "`Tick_Size`, "
  "`Lot_Size`, "
  "`Security_Type`, "
  "`Token`, "
  "`Quote_Size`, "
  "`Instrument_Type`, "
  "`TradingCurrency`, "
  "`SettlementCurrency`, "
  "`TickSizeSlabId`, "
  "`AsOfDate`, "
  "`Last_update_time`, "
  "`Expiry_Date`, "
  "`SettlementDate`, "
  "`TradingStartDate`, "
  "`LastTradingDate`, "
  "`Estee_ID`) "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::EsteeMaster, id_mysql >::find_statement[] =
  "SELECT "
  "`EsteeMaster`.`DataFeed_Ticker`, "
  "`EsteeMaster`.`Underlying_Ticker`, "
  "`EsteeMaster`.`ISIN`, "
  "`EsteeMaster`.`Exchange_Code`, "
  "`EsteeMaster`.`Option_Type`, "
  "`EsteeMaster`.`Status`, "
  "`EsteeMaster`.`TOKEN2`, "
  "`EsteeMaster`.`Expiry_Date2`, "
  "`EsteeMaster`.`SERIES`, "
  "`EsteeMaster`.`Source`, "
  "`EsteeMaster`.`UnderlyingEstee_Id`, "
  "`EsteeMaster`.`Strike_Price`, "
  "`EsteeMaster`.`Tick_Size`, "
  "`EsteeMaster`.`Lot_Size`, "
  "`EsteeMaster`.`Security_Type`, "
  "`EsteeMaster`.`Token`, "
  "`EsteeMaster`.`Quote_Size`, "
  "`EsteeMaster`.`Instrument_Type`, "
  "`EsteeMaster`.`TradingCurrency`, "
  "`EsteeMaster`.`SettlementCurrency`, "
  "`EsteeMaster`.`TickSizeSlabId`, "
  "`EsteeMaster`.`AsOfDate`, "
  "`EsteeMaster`.`Last_update_time`, "
  "`EsteeMaster`.`Expiry_Date`, "
  "`EsteeMaster`.`SettlementDate`, "
  "`EsteeMaster`.`TradingStartDate`, "
  "`EsteeMaster`.`LastTradingDate`, "
  "`EsteeMaster`.`Estee_ID` "
  "FROM `EsteeMaster` "
  "WHERE `EsteeMaster`.`Estee_ID`=?";

  const char access::object_traits_impl< ::EsteeMaster, id_mysql >::update_statement[] =
  "UPDATE `EsteeMaster` "
  "SET "
  "`DataFeed_Ticker`=?, "
  "`Underlying_Ticker`=?, "
  "`ISIN`=?, "
  "`Exchange_Code`=?, "
  "`Option_Type`=?, "
  "`Status`=?, "
  "`TOKEN2`=?, "
  "`Expiry_Date2`=?, "
  "`SERIES`=?, "
  "`Source`=?, "
  "`UnderlyingEstee_Id`=?, "
  "`Strike_Price`=?, "
  "`Tick_Size`=?, "
  "`Lot_Size`=?, "
  "`Security_Type`=?, "
  "`Token`=?, "
  "`Quote_Size`=?, "
  "`Instrument_Type`=?, "
  "`TradingCurrency`=?, "
  "`SettlementCurrency`=?, "
  "`TickSizeSlabId`=?, "
  "`AsOfDate`=?, "
  "`Last_update_time`=?, "
  "`Expiry_Date`=?, "
  "`SettlementDate`=?, "
  "`TradingStartDate`=?, "
  "`LastTradingDate`=? "
  "WHERE `Estee_ID`=?";

  const char access::object_traits_impl< ::EsteeMaster, id_mysql >::erase_statement[] =
  "DELETE FROM `EsteeMaster` "
  "WHERE `Estee_ID`=?";

  const char access::object_traits_impl< ::EsteeMaster, id_mysql >::query_statement[] =
  "SELECT "
  "`EsteeMaster`.`DataFeed_Ticker`, "
  "`EsteeMaster`.`Underlying_Ticker`, "
  "`EsteeMaster`.`ISIN`, "
  "`EsteeMaster`.`Exchange_Code`, "
  "`EsteeMaster`.`Option_Type`, "
  "`EsteeMaster`.`Status`, "
  "`EsteeMaster`.`TOKEN2`, "
  "`EsteeMaster`.`Expiry_Date2`, "
  "`EsteeMaster`.`SERIES`, "
  "`EsteeMaster`.`Source`, "
  "`EsteeMaster`.`UnderlyingEstee_Id`, "
  "`EsteeMaster`.`Strike_Price`, "
  "`EsteeMaster`.`Tick_Size`, "
  "`EsteeMaster`.`Lot_Size`, "
  "`EsteeMaster`.`Security_Type`, "
  "`EsteeMaster`.`Token`, "
  "`EsteeMaster`.`Quote_Size`, "
  "`EsteeMaster`.`Instrument_Type`, "
  "`EsteeMaster`.`TradingCurrency`, "
  "`EsteeMaster`.`SettlementCurrency`, "
  "`EsteeMaster`.`TickSizeSlabId`, "
  "`EsteeMaster`.`AsOfDate`, "
  "`EsteeMaster`.`Last_update_time`, "
  "`EsteeMaster`.`Expiry_Date`, "
  "`EsteeMaster`.`SettlementDate`, "
  "`EsteeMaster`.`TradingStartDate`, "
  "`EsteeMaster`.`LastTradingDate`, "
  "`EsteeMaster`.`Estee_ID` "
  "FROM `EsteeMaster`";

  const char access::object_traits_impl< ::EsteeMaster, id_mysql >::erase_query_statement[] =
  "DELETE FROM `EsteeMaster`";

  const char access::object_traits_impl< ::EsteeMaster, id_mysql >::table_name[] =
  "`EsteeMaster`";

  void access::object_traits_impl< ::EsteeMaster, id_mysql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.Estee_ID_value = 0;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.Estee_ID = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::EsteeMaster, id_mysql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;
    using mysql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.Estee_ID);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::EsteeMaster, id_mysql >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::EsteeMaster, id_mysql >::pointer_type
  access::object_traits_impl< ::EsteeMaster, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::EsteeMaster, id_mysql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::EsteeMaster, id_mysql >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.Estee_ID);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::EsteeMaster, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::EsteeMaster, id_mysql >::object_type >
  access::object_traits_impl< ::EsteeMaster, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  result< access::object_traits_impl< ::EsteeMaster, id_mysql >::object_type >
  access::object_traits_impl< ::EsteeMaster, id_mysql >::
  query (database& db, const odb::query_base& q)
  {
    return query (db, query_base_type (q));
  }

  unsigned long long access::object_traits_impl< ::EsteeMaster, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  unsigned long long access::object_traits_impl< ::EsteeMaster, id_mysql >::
  erase_query (database& db, const odb::query_base& q)
  {
    return erase_query (db, query_base_type (q));
  }

  static const
  access::object_traits_impl< ::EsteeMaster, id_common >::
  function_table_type function_table_EsteeMaster_ =
  {
    &access::object_traits_impl< ::EsteeMaster, id_mysql >::persist,
    &access::object_traits_impl< ::EsteeMaster, id_mysql >::find,
    &access::object_traits_impl< ::EsteeMaster, id_mysql >::find,
    &access::object_traits_impl< ::EsteeMaster, id_mysql >::reload,
    &access::object_traits_impl< ::EsteeMaster, id_mysql >::update,
    &access::object_traits_impl< ::EsteeMaster, id_mysql >::erase,
    &access::object_traits_impl< ::EsteeMaster, id_mysql >::erase,
    &access::object_traits_impl< ::EsteeMaster, id_mysql >::query,
    &access::object_traits_impl< ::EsteeMaster, id_mysql >::erase_query
  };

  static const object_function_table_entry< ::EsteeMaster, id_mysql >
  function_table_entry_EsteeMaster_ (
    &function_table_EsteeMaster_);
}

#include <odb/post.hxx>
