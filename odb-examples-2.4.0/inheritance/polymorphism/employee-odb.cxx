// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "employee-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy
#include <typeinfo>

#include <odb/polymorphic-map.hxx>

#include <odb/mssql/traits.hxx>
#include <odb/mssql/database.hxx>
#include <odb/mssql/transaction.hxx>
#include <odb/mssql/connection.hxx>
#include <odb/mssql/statement.hxx>
#include <odb/mssql/statement-cache.hxx>
#include <odb/mssql/polymorphic-object-statements.hxx>
#include <odb/mssql/container-statements.hxx>
#include <odb/mssql/exceptions.hxx>
#include <odb/mssql/polymorphic-object-result.hxx>

namespace odb
{
  // person
  //

  struct access::object_traits_impl< ::person, id_mssql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mssql::connection&,
      image_type&,
      id_image_type&,
      mssql::binding&,
      mssql::binding&)
    {
    }
  };

  access::object_traits_impl< ::person, id_mssql >::id_type
  access::object_traits_impl< ::person, id_mssql >::
  id (const id_image_type& i)
  {
    mssql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mssql::value_traits<
          long unsigned int,
          mssql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    return id;
  }

  access::object_traits_impl< ::person, id_mssql >::id_type
  access::object_traits_impl< ::person, id_mssql >::
  id (const image_type& i)
  {
    mssql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mssql::value_traits<
          long unsigned int,
          mssql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    return id;
  }

  access::object_traits_impl< ::person, id_mssql >::discriminator_type
  access::object_traits_impl< ::person, id_mssql >::
  discriminator (const image_type& i)
  {
    mssql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    discriminator_type d;
    {
      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_value (
        d,
        i.typeid_value,
        static_cast<std::size_t> (i.typeid_size_ind),
        i.typeid_size_ind == SQL_NULL_DATA);
    }

    return d;
  }

  void access::object_traits_impl< ::person, id_mssql >::
  bind (mssql::bind* b,
        image_type& i,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = mssql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].size_ind = &i.id_size_ind;
      n++;
    }

    // typeid_
    //
    if (sk != statement_update)
    {
      b[n].type = mssql::bind::string;
      b[n].buffer = &i.typeid_value;
      b[n].size_ind = &i.typeid_size_ind;
      b[n].capacity = static_cast<SQLLEN> (sizeof (i.typeid_value));
      n++;
    }

    // first_
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.first_value;
    b[n].size_ind = &i.first_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.first_value));
    n++;

    // last_
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.last_value;
    b[n].size_ind = &i.last_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.last_value));
    n++;
  }

  void access::object_traits_impl< ::person, id_mssql >::
  bind (mssql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = mssql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].size_ind = &i.id_size_ind;
  }

  void access::object_traits_impl< ::person, id_mssql >::
  init (image_type& i,
        const object_type& o,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    if (i.change_callback_.callback != 0)
      (i.change_callback_.callback) (i.change_callback_.context);

    // typeid_
    //
    if (sk == statement_insert)
    {
      const info_type& di (map->find (typeid (o)));

      bool is_null (false);
      std::size_t size (0);
      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_image (
        i.typeid_value,
        sizeof (i.typeid_value) - 1,
        size,
        is_null,
        di.discriminator);
      i.typeid_size_ind =
        is_null ? SQL_NULL_DATA : static_cast<SQLLEN> (size);
    }

    // first_
    //
    {
      ::std::string const& v =
        o.first_;

      bool is_null (false);
      std::size_t size (0);
      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_image (
        i.first_value,
        sizeof (i.first_value) - 1,
        size,
        is_null,
        v);
      i.first_size_ind =
        is_null ? SQL_NULL_DATA : static_cast<SQLLEN> (size);
    }

    // last_
    //
    {
      ::std::string const& v =
        o.last_;

      bool is_null (false);
      std::size_t size (0);
      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_image (
        i.last_value,
        sizeof (i.last_value) - 1,
        size,
        is_null,
        v);
      i.last_size_ind =
        is_null ? SQL_NULL_DATA : static_cast<SQLLEN> (size);
    }
  }

  void access::object_traits_impl< ::person, id_mssql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      mssql::value_traits<
          long unsigned int,
          mssql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    // first_
    //
    {
      ::std::string& v =
        o.first_;

      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_value (
        v,
        i.first_value,
        static_cast<std::size_t> (i.first_size_ind),
        i.first_size_ind == SQL_NULL_DATA);
    }

    // last_
    //
    {
      ::std::string& v =
        o.last_;

      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_value (
        v,
        i.last_value,
        static_cast<std::size_t> (i.last_size_ind),
        i.last_size_ind == SQL_NULL_DATA);
    }
  }

  void access::object_traits_impl< ::person, id_mssql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mssql::value_traits<
          long unsigned int,
          mssql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_size_ind = is_null ? SQL_NULL_DATA : 0;
    }
  }

  access::object_traits_impl< ::person, id_mssql >::map_type*
  access::object_traits_impl< ::person, id_mssql >::map;

  const access::object_traits_impl< ::person, id_mssql >::abstract_info_type
  access::object_traits_impl< ::person, id_mssql >::info (
    typeid (::person),
    0,
    0);

  const char access::object_traits_impl< ::person, id_mssql >::persist_statement[] =
  "INSERT INTO [inh_poly_person] "
  "([typeid], "
  "[first], "
  "[last]) "
  "OUTPUT INSERTED.[id] "
  "VALUES "
  "(?, ?, ?)";

  const char access::object_traits_impl< ::person, id_mssql >::find_statement[] =
  "SELECT "
  "[inh_poly_person].[id], "
  "[inh_poly_person].[typeid], "
  "[inh_poly_person].[first], "
  "[inh_poly_person].[last] "
  "FROM [inh_poly_person] "
  "WHERE [inh_poly_person].[id]=?";

  const char access::object_traits_impl< ::person, id_mssql >::
  find_discriminator_statement[] =
  "SELECT "
  "[inh_poly_person].[typeid] "
  "FROM [inh_poly_person] "
  "WHERE [inh_poly_person].[id]=?";

  const char access::object_traits_impl< ::person, id_mssql >::update_statement[] =
  "UPDATE [inh_poly_person] "
  "SET "
  "[first]=?, "
  "[last]=? "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::person, id_mssql >::erase_statement[] =
  "DELETE FROM [inh_poly_person] "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::person, id_mssql >::query_statement[] =
  "SELECT "
  "[inh_poly_person].[id], "
  "[inh_poly_person].[typeid], "
  "[inh_poly_person].[first], "
  "[inh_poly_person].[last] "
  "FROM [inh_poly_person]";

  const char access::object_traits_impl< ::person, id_mssql >::erase_query_statement[] =
  "DELETE FROM [inh_poly_person]";

  const char access::object_traits_impl< ::person, id_mssql >::table_name[] =
  "[inh_poly_person]";

  void access::object_traits_impl< ::person, id_mssql >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace mssql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    init (im, obj, statement_insert);

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    id_image_type& i (sts.id_image ());
    init (i, obj.id_);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }
  }

  void access::object_traits_impl< ::person, id_mssql >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace mssql;
    using mssql::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    mssql::transaction& tr (mssql::transaction::current ());
    mssql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    init (im, obj, statement_update);

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();
  }

  void access::object_traits_impl< ::person, id_mssql >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace mssql;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);
      const info_type& pi (root_traits::map->find (d));

      if (!pi.derived (info))
        throw object_not_persistent ();

      pi.dispatch (info_type::call_erase, db, 0, &id);
      return;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();
  }

  void access::object_traits_impl< ::person, id_mssql >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::person, id_mssql >::pointer_type
  access::object_traits_impl< ::person, id_mssql >::
  find (database& db, const id_type& id)
  {
    using namespace mssql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    auto_result ar;
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();

      ar.set (sts.find_statement ());
      d = root_traits::discriminator (sts.image ());
    }
    else
      root_traits::discriminator_ (sts, id, &d);

    const info_type& pi (root_traits::map->find (d));

    pointer_type p (pi.create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      st.stream_result ();
      ar.free ();
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      sts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::person, id_mssql >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace mssql;

    const std::type_info& t (typeid (obj));
    const info_type& pi (root_traits::map->find (t));
    return pi.dispatch (info_type::call_find, db, &obj, &id);
  }

  bool access::object_traits_impl< ::person, id_mssql >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace mssql;

    const std::type_info& t (typeid (obj));
    const info_type& pi (root_traits::map->find (t));
    return pi.dispatch (info_type::call_reload, db, &obj, 0);
  }

  bool access::object_traits_impl< ::person, id_mssql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mssql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r != select_statement::no_data)
    {
      ar.release ();
      return true;
    }
    else
      return false;
  }

  void access::object_traits_impl< ::person, id_mssql >::
  discriminator_ (statements_type& sts,
                  const id_type& id,
                  discriminator_type* pd)
  {
    using namespace mssql;

    id_image_type& idi (sts.discriminator_id_image ());
    init (idi, id);

    binding& idb (sts.discriminator_id_image_binding ());
    if (idi.version != sts.discriminator_id_image_version () ||
        idb.version == 0)
    {
      bind (idb.bind, idi);
      sts.discriminator_id_image_version (idi.version);
      idb.version++;
    }

    discriminator_image_type& i (sts.discriminator_image ());
    binding& imb (sts.discriminator_image_binding ());

    if (i.version != sts.discriminator_image_version () ||
        imb.version == 0)
    {
      mssql::bind* b (imb.bind);
      std::size_t n (0);
      {
        b[n].type = mssql::bind::string;
        b[n].buffer = &i.discriminator_value;
        b[n].size_ind = &i.discriminator_size_ind;
        b[n].capacity = static_cast<SQLLEN> (sizeof (i.discriminator_value));
      }

      sts.discriminator_image_version (i.version);
      imb.version++;
    }

    {
      select_statement& st (sts.find_discriminator_statement ());
      st.execute ();
      auto_result ar (st);
      select_statement::result r (st.fetch ());

      if (r == select_statement::no_data)
      {
        throw object_not_persistent ();
      }
    }

    if (pd != 0)
    {
      discriminator_type& d (*pd);
      {
        mssql::value_traits<
            ::std::string,
            mssql::id_string >::set_value (
          d,
          i.discriminator_value,
          static_cast<std::size_t> (i.discriminator_size_ind),
          i.discriminator_size_ind == SQL_NULL_DATA);
      }
    }
  }

  result< access::object_traits_impl< ::person, id_mssql >::object_type >
  access::object_traits_impl< ::person, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) mssql::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::person, id_mssql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // employee
  //

  struct access::object_traits_impl< ::employee, id_mssql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mssql::connection&,
      image_type&,
      id_image_type&,
      mssql::binding&,
      mssql::binding&)
    {
    }
  };

  void access::object_traits_impl< ::employee, id_mssql >::
  bind (mssql::bind* b,
        const mssql::bind* id,
        std::size_t id_size,
        image_type& i,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    std::size_t n (0);

    // id_
    //
    if (sk == statement_insert)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // temporary_
    //
    b[n].type = mssql::bind::bit;
    b[n].buffer = &i.temporary_value;
    b[n].size_ind = &i.temporary_size_ind;
    n++;

    // id_
    //
    if (sk == statement_update)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // person base
    //
    if (sk == statement_select)
      base_traits::bind (b + n, *i.base, sk);
  }

  void access::object_traits_impl< ::employee, id_mssql >::
  init (image_type& i,
        const object_type& o,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    {
      root_traits::image_type& ri (root_image (i));

      if (ri.change_callback_.callback != 0)
        (ri.change_callback_.callback) (ri.change_callback_.context);
    }

    // temporary_
    //
    {
      bool const& v =
        o.temporary_;

      bool is_null (false);
      mssql::value_traits<
          bool,
          mssql::id_bit >::set_image (
        i.temporary_value, is_null, v);
      i.temporary_size_ind = is_null ? SQL_NULL_DATA : 0;
    }
  }

  void access::object_traits_impl< ::employee, id_mssql >::
  init (object_type& o,
        const image_type& i,
        database* db,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // person base
    //
    if (--d != 0)
      base_traits::init (o, *i.base, db);

    // temporary_
    //
    {
      bool& v =
        o.temporary_;

      mssql::value_traits<
          bool,
          mssql::id_bit >::set_value (
        v,
        i.temporary_value,
        i.temporary_size_ind == SQL_NULL_DATA);
    }
  }

  const access::object_traits_impl< ::employee, id_mssql >::info_type
  access::object_traits_impl< ::employee, id_mssql >::info (
    typeid (::employee),
    &object_traits_impl< ::person, id_mssql >::info,
    0,
    "employee",
    &odb::create_impl< ::employee >,
    &odb::dispatch_impl< ::employee, id_mssql >,
    &statements_type::delayed_loader);

  static const access::object_traits_impl< ::employee, id_mssql >::entry_type
  polymorphic_entry_for_employee;

  const char access::object_traits_impl< ::employee, id_mssql >::persist_statement[] =
  "INSERT INTO [inh_poly_employee] "
  "([id], "
  "[temporary]) "
  "VALUES "
  "(?, ?)";

  const char* const access::object_traits_impl< ::employee, id_mssql >::find_statements[] =
  {
    "SELECT "
    "[inh_poly_employee].[temporary], "
    "[inh_poly_person].[id], "
    "[inh_poly_person].[typeid], "
    "[inh_poly_person].[first], "
    "[inh_poly_person].[last] "
    "FROM [inh_poly_employee] "
    "LEFT JOIN [inh_poly_person] ON [inh_poly_person].[id]=[inh_poly_employee].[id] "
    "WHERE [inh_poly_employee].[id]=?",

    "SELECT "
    "[inh_poly_employee].[temporary] "
    "FROM [inh_poly_employee] "
    "WHERE [inh_poly_employee].[id]=?"
  };

  const std::size_t access::object_traits_impl< ::employee, id_mssql >::find_column_counts[] =
  {
    5UL,
    1UL
  };

  const char access::object_traits_impl< ::employee, id_mssql >::update_statement[] =
  "UPDATE [inh_poly_employee] "
  "SET "
  "[temporary]=? "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::employee, id_mssql >::erase_statement[] =
  "DELETE FROM [inh_poly_employee] "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::employee, id_mssql >::query_statement[] =
  "SELECT\n"
  "[inh_poly_employee].[temporary],\n"
  "[inh_poly_person].[id],\n"
  "[inh_poly_person].[typeid],\n"
  "[inh_poly_person].[first],\n"
  "[inh_poly_person].[last]\n"
  "FROM [inh_poly_employee]\n"
  "LEFT JOIN [inh_poly_person] ON [inh_poly_person].[id]=[inh_poly_employee].[id]";

  const char access::object_traits_impl< ::employee, id_mssql >::erase_query_statement[] =
  "DELETE FROM [inh_poly_employee]";

  const char access::object_traits_impl< ::employee, id_mssql >::table_name[] =
  "[inh_poly_employee]";

  void access::object_traits_impl< ::employee, id_mssql >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace mssql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    base_traits::persist (db, obj, false, false);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());
    const binding& idb (sts.id_image_binding ());

    init (im, obj, statement_insert);

    if (idb.version != sts.insert_id_binding_version () ||
        im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_insert);
      sts.insert_id_binding_version (idb.version);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::employee, id_mssql >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace mssql;
    using mssql::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    mssql::transaction& tr (mssql::transaction::current ());
    mssql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    base_traits::update (db, obj, false, false);

    image_type& im (sts.image ());
    init (im, obj, statement_update);

    const binding& idb (sts.id_image_binding ());
    binding& imb (sts.update_image_binding ());
    if (idb.version != sts.update_id_binding_version () ||
        im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_update);
      sts.update_id_binding_version (idb.version);
      sts.update_image_version (im.version);
      imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::employee, id_mssql >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace mssql;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    base_traits::erase (db, id, false, false);

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::employee, id_mssql >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::employee, id_mssql >::pointer_type
  access::object_traits_impl< ::employee, id_mssql >::
  find (database& db, const id_type& id)
  {
    using namespace mssql;

    {
      root_traits::pointer_type rp (pointer_cache_traits::find (db, id));

      if (!root_traits::pointer_traits::null_ptr (rp))
        return
          root_traits::pointer_traits::dynamic_pointer_cast<object_type> (rp);
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);
    auto_result ar;
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();

      ar.set (sts.find_statement (depth));
      d = root_traits::discriminator (rsts.image ());
    }
    else
      root_traits::discriminator_ (rsts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    root_traits::pointer_type rp (pi.create ());
    pointer_type p (
      root_traits::pointer_traits::static_pointer_cast<object_type> (rp));
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, rp));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement (depth));
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      st.stream_result ();
      ar.free ();
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      rsts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      rsts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::employee, id_mssql >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace mssql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);
    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, false);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::employee, id_mssql >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace mssql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, true);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::employee, id_mssql >::
  find_ (statements_type& sts,
         const id_type* id,
         std::size_t d)
  {
    using namespace mssql;

    if (d == depth)
    {
      id_image_type& i (sts.id_image ());
      init (i, *id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (d));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    select_statement& st (sts.find_statement (d));

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r != select_statement::no_data)
    {
      ar.release ();
      return true;
    }
    else
      return false;
  }

  void access::object_traits_impl< ::employee, id_mssql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload,
         std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    if (--d != 0)
      base_traits::load_ (sts.base_statements (), obj, reload);
  }

  void access::object_traits_impl< ::employee, id_mssql >::
  load_ (database& db, root_type& r, std::size_t d)
  {
    using namespace mssql;

    object_type& obj (static_cast<object_type&> (r));
    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    d = depth - d;

    if (!find_ (sts, 0, d))
      throw object_not_persistent ();

    select_statement& st (sts.find_statement (d));
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);
    init (obj, sts.image (), &db, d);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, false, d);
  }

  result< access::object_traits_impl< ::employee, id_mssql >::object_type >
  access::object_traits_impl< ::employee, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (depth));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) mssql::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::employee, id_mssql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // contractor
  //

  struct access::object_traits_impl< ::contractor, id_mssql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mssql::connection&,
      image_type&,
      id_image_type&,
      mssql::binding&,
      mssql::binding&)
    {
    }
  };

  void access::object_traits_impl< ::contractor, id_mssql >::
  bind (mssql::bind* b,
        const mssql::bind* id,
        std::size_t id_size,
        image_type& i,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    std::size_t n (0);

    // id_
    //
    if (sk == statement_insert)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // email_
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.email_value;
    b[n].size_ind = &i.email_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.email_value));
    n++;

    // id_
    //
    if (sk == statement_update)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // person base
    //
    if (sk == statement_select)
      base_traits::bind (b + n, *i.base, sk);
  }

  void access::object_traits_impl< ::contractor, id_mssql >::
  init (image_type& i,
        const object_type& o,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    {
      root_traits::image_type& ri (root_image (i));

      if (ri.change_callback_.callback != 0)
        (ri.change_callback_.callback) (ri.change_callback_.context);
    }

    // email_
    //
    {
      ::std::string const& v =
        o.email_;

      bool is_null (false);
      std::size_t size (0);
      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_image (
        i.email_value,
        sizeof (i.email_value) - 1,
        size,
        is_null,
        v);
      i.email_size_ind =
        is_null ? SQL_NULL_DATA : static_cast<SQLLEN> (size);
    }
  }

  void access::object_traits_impl< ::contractor, id_mssql >::
  init (object_type& o,
        const image_type& i,
        database* db,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // person base
    //
    if (--d != 0)
      base_traits::init (o, *i.base, db);

    // email_
    //
    {
      ::std::string& v =
        o.email_;

      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_value (
        v,
        i.email_value,
        static_cast<std::size_t> (i.email_size_ind),
        i.email_size_ind == SQL_NULL_DATA);
    }
  }

  const access::object_traits_impl< ::contractor, id_mssql >::info_type
  access::object_traits_impl< ::contractor, id_mssql >::info (
    typeid (::contractor),
    &object_traits_impl< ::person, id_mssql >::info,
    0,
    "contractor",
    &odb::create_impl< ::contractor >,
    &odb::dispatch_impl< ::contractor, id_mssql >,
    &statements_type::delayed_loader);

  static const access::object_traits_impl< ::contractor, id_mssql >::entry_type
  polymorphic_entry_for_contractor;

  const char access::object_traits_impl< ::contractor, id_mssql >::persist_statement[] =
  "INSERT INTO [inh_poly_contractor] "
  "([id], "
  "[email]) "
  "VALUES "
  "(?, ?)";

  const char* const access::object_traits_impl< ::contractor, id_mssql >::find_statements[] =
  {
    "SELECT "
    "[inh_poly_contractor].[email], "
    "[inh_poly_person].[id], "
    "[inh_poly_person].[typeid], "
    "[inh_poly_person].[first], "
    "[inh_poly_person].[last] "
    "FROM [inh_poly_contractor] "
    "LEFT JOIN [inh_poly_person] ON [inh_poly_person].[id]=[inh_poly_contractor].[id] "
    "WHERE [inh_poly_contractor].[id]=?",

    "SELECT "
    "[inh_poly_contractor].[email] "
    "FROM [inh_poly_contractor] "
    "WHERE [inh_poly_contractor].[id]=?"
  };

  const std::size_t access::object_traits_impl< ::contractor, id_mssql >::find_column_counts[] =
  {
    5UL,
    1UL
  };

  const char access::object_traits_impl< ::contractor, id_mssql >::update_statement[] =
  "UPDATE [inh_poly_contractor] "
  "SET "
  "[email]=? "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::contractor, id_mssql >::erase_statement[] =
  "DELETE FROM [inh_poly_contractor] "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::contractor, id_mssql >::query_statement[] =
  "SELECT\n"
  "[inh_poly_contractor].[email],\n"
  "[inh_poly_person].[id],\n"
  "[inh_poly_person].[typeid],\n"
  "[inh_poly_person].[first],\n"
  "[inh_poly_person].[last]\n"
  "FROM [inh_poly_contractor]\n"
  "LEFT JOIN [inh_poly_person] ON [inh_poly_person].[id]=[inh_poly_contractor].[id]";

  const char access::object_traits_impl< ::contractor, id_mssql >::erase_query_statement[] =
  "DELETE FROM [inh_poly_contractor]";

  const char access::object_traits_impl< ::contractor, id_mssql >::table_name[] =
  "[inh_poly_contractor]";

  void access::object_traits_impl< ::contractor, id_mssql >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace mssql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    base_traits::persist (db, obj, false, false);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());
    const binding& idb (sts.id_image_binding ());

    init (im, obj, statement_insert);

    if (idb.version != sts.insert_id_binding_version () ||
        im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_insert);
      sts.insert_id_binding_version (idb.version);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::contractor, id_mssql >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace mssql;
    using mssql::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    mssql::transaction& tr (mssql::transaction::current ());
    mssql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    base_traits::update (db, obj, false, false);

    image_type& im (sts.image ());
    init (im, obj, statement_update);

    const binding& idb (sts.id_image_binding ());
    binding& imb (sts.update_image_binding ());
    if (idb.version != sts.update_id_binding_version () ||
        im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_update);
      sts.update_id_binding_version (idb.version);
      sts.update_image_version (im.version);
      imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::contractor, id_mssql >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace mssql;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    base_traits::erase (db, id, false, false);

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::contractor, id_mssql >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::contractor, id_mssql >::pointer_type
  access::object_traits_impl< ::contractor, id_mssql >::
  find (database& db, const id_type& id)
  {
    using namespace mssql;

    {
      root_traits::pointer_type rp (pointer_cache_traits::find (db, id));

      if (!root_traits::pointer_traits::null_ptr (rp))
        return
          root_traits::pointer_traits::dynamic_pointer_cast<object_type> (rp);
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);
    auto_result ar;
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();

      ar.set (sts.find_statement (depth));
      d = root_traits::discriminator (rsts.image ());
    }
    else
      root_traits::discriminator_ (rsts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    root_traits::pointer_type rp (pi.create ());
    pointer_type p (
      root_traits::pointer_traits::static_pointer_cast<object_type> (rp));
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, rp));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement (depth));
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      st.stream_result ();
      ar.free ();
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      rsts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      rsts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::contractor, id_mssql >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace mssql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);
    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, false);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::contractor, id_mssql >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace mssql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, true);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::contractor, id_mssql >::
  find_ (statements_type& sts,
         const id_type* id,
         std::size_t d)
  {
    using namespace mssql;

    if (d == depth)
    {
      id_image_type& i (sts.id_image ());
      init (i, *id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (d));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    select_statement& st (sts.find_statement (d));

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r != select_statement::no_data)
    {
      ar.release ();
      return true;
    }
    else
      return false;
  }

  void access::object_traits_impl< ::contractor, id_mssql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload,
         std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    if (--d != 0)
      base_traits::load_ (sts.base_statements (), obj, reload);
  }

  void access::object_traits_impl< ::contractor, id_mssql >::
  load_ (database& db, root_type& r, std::size_t d)
  {
    using namespace mssql;

    object_type& obj (static_cast<object_type&> (r));
    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    d = depth - d;

    if (!find_ (sts, 0, d))
      throw object_not_persistent ();

    select_statement& st (sts.find_statement (d));
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);
    init (obj, sts.image (), &db, d);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, false, d);
  }

  result< access::object_traits_impl< ::contractor, id_mssql >::object_type >
  access::object_traits_impl< ::contractor, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (depth));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) mssql::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::contractor, id_mssql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }
}

#include <odb/post.hxx>
