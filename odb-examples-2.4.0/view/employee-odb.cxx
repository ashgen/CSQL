// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "employee-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy


#include <odb/mssql/traits.hxx>
#include <odb/mssql/database.hxx>
#include <odb/mssql/transaction.hxx>
#include <odb/mssql/connection.hxx>
#include <odb/mssql/statement.hxx>
#include <odb/mssql/statement-cache.hxx>
#include <odb/mssql/simple-object-statements.hxx>
#include <odb/mssql/view-statements.hxx>
#include <odb/mssql/container-statements.hxx>
#include <odb/mssql/exceptions.hxx>
#include <odb/mssql/simple-object-result.hxx>
#include <odb/mssql/view-result.hxx>

namespace odb
{
  // country
  //

  struct access::object_traits_impl< ::country, id_mssql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mssql::connection&,
      image_type&,
      id_image_type&,
      mssql::binding&,
      mssql::binding&)
    {
    }
  };

  access::object_traits_impl< ::country, id_mssql >::id_type
  access::object_traits_impl< ::country, id_mssql >::
  id (const image_type& i)
  {
    mssql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_value (
        id,
        i.code_value,
        static_cast<std::size_t> (i.code_size_ind),
        i.code_size_ind == SQL_NULL_DATA);
    }

    return id;
  }

  void access::object_traits_impl< ::country, id_mssql >::
  bind (mssql::bind* b,
        image_type& i,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    std::size_t n (0);

    // code_
    //
    if (sk != statement_update)
    {
      b[n].type = mssql::bind::string;
      b[n].buffer = &i.code_value;
      b[n].size_ind = &i.code_size_ind;
      b[n].capacity = static_cast<SQLLEN> (sizeof (i.code_value));
      n++;
    }

    // name_
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.name_value;
    b[n].size_ind = &i.name_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.name_value));
    n++;
  }

  void access::object_traits_impl< ::country, id_mssql >::
  bind (mssql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.id_value;
    b[n].size_ind = &i.id_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.id_value));
  }

  void access::object_traits_impl< ::country, id_mssql >::
  init (image_type& i,
        const object_type& o,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    if (i.change_callback_.callback != 0)
      (i.change_callback_.callback) (i.change_callback_.context);

    // code_
    //
    if (sk == statement_insert)
    {
      ::std::string const& v =
        o.code_;

      bool is_null (false);
      std::size_t size (0);
      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_image (
        i.code_value,
        sizeof (i.code_value) - 1,
        size,
        is_null,
        v);
      i.code_size_ind =
        is_null ? SQL_NULL_DATA : static_cast<SQLLEN> (size);
    }

    // name_
    //
    {
      ::std::string const& v =
        o.name_;

      bool is_null (false);
      std::size_t size (0);
      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_image (
        i.name_value,
        sizeof (i.name_value) - 1,
        size,
        is_null,
        v);
      i.name_size_ind =
        is_null ? SQL_NULL_DATA : static_cast<SQLLEN> (size);
    }
  }

  void access::object_traits_impl< ::country, id_mssql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // code_
    //
    {
      ::std::string& v =
        o.code_;

      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_value (
        v,
        i.code_value,
        static_cast<std::size_t> (i.code_size_ind),
        i.code_size_ind == SQL_NULL_DATA);
    }

    // name_
    //
    {
      ::std::string& v =
        o.name_;

      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_value (
        v,
        i.name_value,
        static_cast<std::size_t> (i.name_size_ind),
        i.name_size_ind == SQL_NULL_DATA);
    }
  }

  void access::object_traits_impl< ::country, id_mssql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      std::size_t size (0);
      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_image (
        i.id_value,
        sizeof (i.id_value) - 1,
        size,
        is_null,
        id);
      i.id_size_ind =
        is_null ? SQL_NULL_DATA : static_cast<SQLLEN> (size);
    }
  }

  const char access::object_traits_impl< ::country, id_mssql >::persist_statement[] =
  "INSERT INTO [view_country] "
  "([code], "
  "[name]) "
  "VALUES "
  "(?, ?)";

  const char access::object_traits_impl< ::country, id_mssql >::find_statement[] =
  "SELECT "
  "[view_country].[code], "
  "[view_country].[name] "
  "FROM [view_country] "
  "WHERE [view_country].[code]=?";

  const char access::object_traits_impl< ::country, id_mssql >::update_statement[] =
  "UPDATE [view_country] "
  "SET "
  "[name]=? "
  "WHERE [code]=?";

  const char access::object_traits_impl< ::country, id_mssql >::erase_statement[] =
  "DELETE FROM [view_country] "
  "WHERE [code]=?";

  const char access::object_traits_impl< ::country, id_mssql >::query_statement[] =
  "SELECT "
  "[view_country].[code], "
  "[view_country].[name] "
  "FROM [view_country]";

  const char access::object_traits_impl< ::country, id_mssql >::erase_query_statement[] =
  "DELETE FROM [view_country]";

  const char access::object_traits_impl< ::country, id_mssql >::table_name[] =
  "[view_country]";

  void access::object_traits_impl< ::country, id_mssql >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    init (im, obj, statement_insert);

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::country, id_mssql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;
    using mssql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mssql::transaction& tr (mssql::transaction::current ());
    mssql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.code_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    init (im, obj, statement_update);

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::country, id_mssql >::
  erase (database& db, const id_type& id)
  {
    using namespace mssql;

    ODB_POTENTIALLY_UNUSED (db);

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::country, id_mssql >::pointer_type
  access::object_traits_impl< ::country, id_mssql >::
  find (database& db, const id_type& id)
  {
    using namespace mssql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    auto_result ar;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();

      ar.set (sts.find_statement ());
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      st.stream_result ();
      ar.free ();
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::country, id_mssql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);
    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::country, id_mssql >::
  reload (database& db, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.code_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::country, id_mssql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mssql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r != select_statement::no_data)
    {
      ar.release ();
      return true;
    }
    else
      return false;
  }

  result< access::object_traits_impl< ::country, id_mssql >::object_type >
  access::object_traits_impl< ::country, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mssql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::country, id_mssql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // employer
  //

  struct access::object_traits_impl< ::employer, id_mssql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mssql::connection&,
      image_type&,
      id_image_type&,
      mssql::binding&,
      mssql::binding&)
    {
    }
  };

  access::object_traits_impl< ::employer, id_mssql >::id_type
  access::object_traits_impl< ::employer, id_mssql >::
  id (const image_type& i)
  {
    mssql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mssql::value_traits<
          long unsigned int,
          mssql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    return id;
  }

  void access::object_traits_impl< ::employer, id_mssql >::
  bind (mssql::bind* b,
        image_type& i,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = mssql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].size_ind = &i.id_size_ind;
      n++;
    }

    // name_
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.name_value;
    b[n].size_ind = &i.name_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.name_value));
    n++;
  }

  void access::object_traits_impl< ::employer, id_mssql >::
  bind (mssql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = mssql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].size_ind = &i.id_size_ind;
  }

  void access::object_traits_impl< ::employer, id_mssql >::
  init (image_type& i,
        const object_type& o,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    if (i.change_callback_.callback != 0)
      (i.change_callback_.callback) (i.change_callback_.context);

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      mssql::value_traits<
          long unsigned int,
          mssql::id_bigint >::set_image (
        i.id_value, is_null, v);
      i.id_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // name_
    //
    {
      ::std::string const& v =
        o.name_;

      bool is_null (false);
      std::size_t size (0);
      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_image (
        i.name_value,
        sizeof (i.name_value) - 1,
        size,
        is_null,
        v);
      i.name_size_ind =
        is_null ? SQL_NULL_DATA : static_cast<SQLLEN> (size);
    }
  }

  void access::object_traits_impl< ::employer, id_mssql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      mssql::value_traits<
          long unsigned int,
          mssql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    // name_
    //
    {
      ::std::string& v =
        o.name_;

      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_value (
        v,
        i.name_value,
        static_cast<std::size_t> (i.name_size_ind),
        i.name_size_ind == SQL_NULL_DATA);
    }
  }

  void access::object_traits_impl< ::employer, id_mssql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mssql::value_traits<
          long unsigned int,
          mssql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_size_ind = is_null ? SQL_NULL_DATA : 0;
    }
  }

  const char access::object_traits_impl< ::employer, id_mssql >::persist_statement[] =
  "INSERT INTO [view_employer] "
  "([id], "
  "[name]) "
  "VALUES "
  "(?, ?)";

  const char access::object_traits_impl< ::employer, id_mssql >::find_statement[] =
  "SELECT "
  "[view_employer].[id], "
  "[view_employer].[name] "
  "FROM [view_employer] "
  "WHERE [view_employer].[id]=?";

  const char access::object_traits_impl< ::employer, id_mssql >::update_statement[] =
  "UPDATE [view_employer] "
  "SET "
  "[name]=? "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::employer, id_mssql >::erase_statement[] =
  "DELETE FROM [view_employer] "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::employer, id_mssql >::query_statement[] =
  "SELECT "
  "[view_employer].[id], "
  "[view_employer].[name] "
  "FROM [view_employer]";

  const char access::object_traits_impl< ::employer, id_mssql >::erase_query_statement[] =
  "DELETE FROM [view_employer]";

  const char access::object_traits_impl< ::employer, id_mssql >::table_name[] =
  "[view_employer]";

  void access::object_traits_impl< ::employer, id_mssql >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    init (im, obj, statement_insert);

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::employer, id_mssql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;
    using mssql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mssql::transaction& tr (mssql::transaction::current ());
    mssql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    init (im, obj, statement_update);

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::employer, id_mssql >::
  erase (database& db, const id_type& id)
  {
    using namespace mssql;

    ODB_POTENTIALLY_UNUSED (db);

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::employer, id_mssql >::pointer_type
  access::object_traits_impl< ::employer, id_mssql >::
  find (database& db, const id_type& id)
  {
    using namespace mssql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    auto_result ar;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();

      ar.set (sts.find_statement ());
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      st.stream_result ();
      ar.free ();
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::employer, id_mssql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);
    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::employer, id_mssql >::
  reload (database& db, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::employer, id_mssql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mssql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r != select_statement::no_data)
    {
      ar.release ();
      return true;
    }
    else
      return false;
  }

  result< access::object_traits_impl< ::employer, id_mssql >::object_type >
  access::object_traits_impl< ::employer, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mssql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::employer, id_mssql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // employee
  //

  const char alias_traits<  ::country,
    id_mssql,
    access::object_traits_impl< ::employee, id_mssql >::residence_tag>::
  table_name[] = "[residence]";

  const char alias_traits<  ::country,
    id_mssql,
    access::object_traits_impl< ::employee, id_mssql >::nationality_tag>::
  table_name[] = "[nationality]";

  const char alias_traits<  ::employer,
    id_mssql,
    access::object_traits_impl< ::employee, id_mssql >::employed_by_tag>::
  table_name[] = "[employed_by]";

  struct access::object_traits_impl< ::employee, id_mssql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mssql::connection&,
      image_type&,
      id_image_type&,
      mssql::binding&,
      mssql::binding&)
    {
    }
  };

  access::object_traits_impl< ::employee, id_mssql >::id_type
  access::object_traits_impl< ::employee, id_mssql >::
  id (const image_type& i)
  {
    mssql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mssql::value_traits<
          long unsigned int,
          mssql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    return id;
  }

  void access::object_traits_impl< ::employee, id_mssql >::
  bind (mssql::bind* b,
        image_type& i,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = mssql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].size_ind = &i.id_size_ind;
      n++;
    }

    // first_
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.first_value;
    b[n].size_ind = &i.first_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.first_value));
    n++;

    // last_
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.last_value;
    b[n].size_ind = &i.last_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.last_value));
    n++;

    // age_
    //
    b[n].type = mssql::bind::smallint;
    b[n].buffer = &i.age_value;
    b[n].size_ind = &i.age_size_ind;
    n++;

    // residence_
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.residence_value;
    b[n].size_ind = &i.residence_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.residence_value));
    n++;

    // nationality_
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.nationality_value;
    b[n].size_ind = &i.nationality_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.nationality_value));
    n++;

    // employed_by_
    //
    b[n].type = mssql::bind::bigint;
    b[n].buffer = &i.employed_by_value;
    b[n].size_ind = &i.employed_by_size_ind;
    n++;
  }

  void access::object_traits_impl< ::employee, id_mssql >::
  bind (mssql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = mssql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].size_ind = &i.id_size_ind;
  }

  void access::object_traits_impl< ::employee, id_mssql >::
  init (image_type& i,
        const object_type& o,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    if (i.change_callback_.callback != 0)
      (i.change_callback_.callback) (i.change_callback_.context);

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      mssql::value_traits<
          long unsigned int,
          mssql::id_bigint >::set_image (
        i.id_value, is_null, v);
      i.id_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // first_
    //
    {
      ::std::string const& v =
        o.first_;

      bool is_null (false);
      std::size_t size (0);
      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_image (
        i.first_value,
        sizeof (i.first_value) - 1,
        size,
        is_null,
        v);
      i.first_size_ind =
        is_null ? SQL_NULL_DATA : static_cast<SQLLEN> (size);
    }

    // last_
    //
    {
      ::std::string const& v =
        o.last_;

      bool is_null (false);
      std::size_t size (0);
      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_image (
        i.last_value,
        sizeof (i.last_value) - 1,
        size,
        is_null,
        v);
      i.last_size_ind =
        is_null ? SQL_NULL_DATA : static_cast<SQLLEN> (size);
    }

    // age_
    //
    {
      short unsigned int const& v =
        o.age_;

      bool is_null (false);
      mssql::value_traits<
          short unsigned int,
          mssql::id_smallint >::set_image (
        i.age_value, is_null, v);
      i.age_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // residence_
    //
    {
      ::std::tr1::shared_ptr< ::country > const& v =
        o.residence_;

      typedef object_traits< ::country > obj_traits;
      typedef odb::pointer_traits< ::std::tr1::shared_ptr< ::country > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        std::size_t size (0);
        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_string >::set_image (
          i.residence_value,
          sizeof (i.residence_value) - 1,
          size,
          is_null,
          id);
        i.residence_size_ind =
          is_null ? SQL_NULL_DATA : static_cast<SQLLEN> (size);
      }
      else
        i.residence_size_ind = SQL_NULL_DATA;
    }

    // nationality_
    //
    {
      ::std::tr1::shared_ptr< ::country > const& v =
        o.nationality_;

      typedef object_traits< ::country > obj_traits;
      typedef odb::pointer_traits< ::std::tr1::shared_ptr< ::country > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        std::size_t size (0);
        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_string >::set_image (
          i.nationality_value,
          sizeof (i.nationality_value) - 1,
          size,
          is_null,
          id);
        i.nationality_size_ind =
          is_null ? SQL_NULL_DATA : static_cast<SQLLEN> (size);
      }
      else
        i.nationality_size_ind = SQL_NULL_DATA;
    }

    // employed_by_
    //
    {
      ::std::tr1::shared_ptr< ::employer > const& v =
        o.employed_by_;

      typedef object_traits< ::employer > obj_traits;
      typedef odb::pointer_traits< ::std::tr1::shared_ptr< ::employer > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_bigint >::set_image (
          i.employed_by_value, is_null, id);
        i.employed_by_size_ind = is_null ? SQL_NULL_DATA : 0;
      }
      else
        i.employed_by_size_ind = SQL_NULL_DATA;
    }
  }

  void access::object_traits_impl< ::employee, id_mssql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      mssql::value_traits<
          long unsigned int,
          mssql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    // first_
    //
    {
      ::std::string& v =
        o.first_;

      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_value (
        v,
        i.first_value,
        static_cast<std::size_t> (i.first_size_ind),
        i.first_size_ind == SQL_NULL_DATA);
    }

    // last_
    //
    {
      ::std::string& v =
        o.last_;

      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_value (
        v,
        i.last_value,
        static_cast<std::size_t> (i.last_size_ind),
        i.last_size_ind == SQL_NULL_DATA);
    }

    // age_
    //
    {
      short unsigned int& v =
        o.age_;

      mssql::value_traits<
          short unsigned int,
          mssql::id_smallint >::set_value (
        v,
        i.age_value,
        i.age_size_ind == SQL_NULL_DATA);
    }

    // residence_
    //
    {
      ::std::tr1::shared_ptr< ::country >& v =
        o.residence_;

      typedef object_traits< ::country > obj_traits;
      typedef odb::pointer_traits< ::std::tr1::shared_ptr< ::country > > ptr_traits;

      if (i.residence_size_ind == SQL_NULL_DATA)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_string >::set_value (
          id,
          i.residence_value,
          static_cast<std::size_t> (i.residence_size_ind),
          i.residence_size_ind == SQL_NULL_DATA);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mssql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // nationality_
    //
    {
      ::std::tr1::shared_ptr< ::country >& v =
        o.nationality_;

      typedef object_traits< ::country > obj_traits;
      typedef odb::pointer_traits< ::std::tr1::shared_ptr< ::country > > ptr_traits;

      if (i.nationality_size_ind == SQL_NULL_DATA)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_string >::set_value (
          id,
          i.nationality_value,
          static_cast<std::size_t> (i.nationality_size_ind),
          i.nationality_size_ind == SQL_NULL_DATA);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mssql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // employed_by_
    //
    {
      ::std::tr1::shared_ptr< ::employer >& v =
        o.employed_by_;

      typedef object_traits< ::employer > obj_traits;
      typedef odb::pointer_traits< ::std::tr1::shared_ptr< ::employer > > ptr_traits;

      if (i.employed_by_size_ind == SQL_NULL_DATA)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_bigint >::set_value (
          id,
          i.employed_by_value,
          i.employed_by_size_ind == SQL_NULL_DATA);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mssql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }

  void access::object_traits_impl< ::employee, id_mssql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mssql::value_traits<
          long unsigned int,
          mssql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_size_ind = is_null ? SQL_NULL_DATA : 0;
    }
  }

  const char access::object_traits_impl< ::employee, id_mssql >::persist_statement[] =
  "INSERT INTO [view_employee] "
  "([id], "
  "[first], "
  "[last], "
  "[age], "
  "[residence], "
  "[nationality], "
  "[employed_by]) "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::employee, id_mssql >::find_statement[] =
  "SELECT "
  "[view_employee].[id], "
  "[view_employee].[first], "
  "[view_employee].[last], "
  "[view_employee].[age], "
  "[view_employee].[residence], "
  "[view_employee].[nationality], "
  "[view_employee].[employed_by] "
  "FROM [view_employee] "
  "WHERE [view_employee].[id]=?";

  const char access::object_traits_impl< ::employee, id_mssql >::update_statement[] =
  "UPDATE [view_employee] "
  "SET "
  "[first]=?, "
  "[last]=?, "
  "[age]=?, "
  "[residence]=?, "
  "[nationality]=?, "
  "[employed_by]=? "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::employee, id_mssql >::erase_statement[] =
  "DELETE FROM [view_employee] "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::employee, id_mssql >::query_statement[] =
  "SELECT\n"
  "[view_employee].[id],\n"
  "[view_employee].[first],\n"
  "[view_employee].[last],\n"
  "[view_employee].[age],\n"
  "[view_employee].[residence],\n"
  "[view_employee].[nationality],\n"
  "[view_employee].[employed_by]\n"
  "FROM [view_employee]\n"
  "LEFT JOIN [view_country] AS [residence] ON [residence].[code]=[view_employee].[residence]\n"
  "LEFT JOIN [view_country] AS [nationality] ON [nationality].[code]=[view_employee].[nationality]\n"
  "LEFT JOIN [view_employer] AS [employed_by] ON [employed_by].[id]=[view_employee].[employed_by]";

  const char access::object_traits_impl< ::employee, id_mssql >::erase_query_statement[] =
  "DELETE FROM [view_employee]";

  const char access::object_traits_impl< ::employee, id_mssql >::table_name[] =
  "[view_employee]";

  void access::object_traits_impl< ::employee, id_mssql >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    init (im, obj, statement_insert);

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::employee, id_mssql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;
    using mssql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mssql::transaction& tr (mssql::transaction::current ());
    mssql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    init (im, obj, statement_update);

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::employee, id_mssql >::
  erase (database& db, const id_type& id)
  {
    using namespace mssql;

    ODB_POTENTIALLY_UNUSED (db);

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::employee, id_mssql >::pointer_type
  access::object_traits_impl< ::employee, id_mssql >::
  find (database& db, const id_type& id)
  {
    using namespace mssql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    auto_result ar;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();

      ar.set (sts.find_statement ());
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      st.stream_result ();
      ar.free ();
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::employee, id_mssql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);
    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::employee, id_mssql >::
  reload (database& db, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::employee, id_mssql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mssql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r != select_statement::no_data)
    {
      ar.release ();
      return true;
    }
    else
      return false;
  }

  result< access::object_traits_impl< ::employee, id_mssql >::object_type >
  access::object_traits_impl< ::employee, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mssql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::employee, id_mssql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // employee_name
  //

  void access::view_traits_impl< ::employee_name, id_mssql >::
  bind (mssql::bind* b,
        image_type& i)
  {
    using namespace mssql;

    mssql::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // first
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.first_value;
    b[n].size_ind = &i.first_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.first_value));
    n++;

    // last
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.last_value;
    b[n].size_ind = &i.last_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.last_value));
    n++;
  }

  void access::view_traits_impl< ::employee_name, id_mssql >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // first
    //
    {
      ::std::string& v =
        o.first;

      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_value (
        v,
        i.first_value,
        static_cast<std::size_t> (i.first_size_ind),
        i.first_size_ind == SQL_NULL_DATA);
    }

    // last
    //
    {
      ::std::string& v =
        o.last;

      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_value (
        v,
        i.last_value,
        static_cast<std::size_t> (i.last_size_ind),
        i.last_size_ind == SQL_NULL_DATA);
    }
  }

  access::view_traits_impl< ::employee_name, id_mssql >::query_base_type
  access::view_traits_impl< ::employee_name, id_mssql >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "[view_employee].[first], "
      "[view_employee].[last] ");

    r += "FROM [view_employee]";

    if (!q.empty ())
    {
      r += " ";
      r += q.clause_prefix ();
      r += q;
    }

    return r;
  }

  result< access::view_traits_impl< ::employee_name, id_mssql >::view_type >
  access::view_traits_impl< ::employee_name, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        false,
        true,
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) mssql::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }

  // employee_count
  //

  void access::view_traits_impl< ::employee_count, id_mssql >::
  bind (mssql::bind* b,
        image_type& i)
  {
    using namespace mssql;

    mssql::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // count
    //
    b[n].type = mssql::bind::bigint;
    b[n].buffer = &i.count_value;
    b[n].size_ind = &i.count_size_ind;
    n++;
  }

  void access::view_traits_impl< ::employee_count, id_mssql >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // count
    //
    {
      ::std::size_t& v =
        o.count;

      mssql::value_traits<
          ::std::size_t,
          mssql::id_bigint >::set_value (
        v,
        i.count_value,
        i.count_size_ind == SQL_NULL_DATA);
    }
  }

  access::view_traits_impl< ::employee_count, id_mssql >::query_base_type
  access::view_traits_impl< ::employee_count, id_mssql >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "count([view_employee].[id]) ");

    r += "FROM [view_employee]";

    if (!q.empty ())
    {
      r += " ";
      r += q.clause_prefix ();
      r += q;
    }

    return r;
  }

  result< access::view_traits_impl< ::employee_count, id_mssql >::view_type >
  access::view_traits_impl< ::employee_count, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        false,
        true,
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) mssql::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }

  // employee_employer
  //

  void access::view_traits_impl< ::employee_employer, id_mssql >::
  bind (mssql::bind* b,
        image_type& i)
  {
    using namespace mssql;

    mssql::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // first
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.first_value;
    b[n].size_ind = &i.first_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.first_value));
    n++;

    // last
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.last_value;
    b[n].size_ind = &i.last_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.last_value));
    n++;

    // employer_name
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.employer_name_value;
    b[n].size_ind = &i.employer_name_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.employer_name_value));
    n++;
  }

  void access::view_traits_impl< ::employee_employer, id_mssql >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // first
    //
    {
      ::std::string& v =
        o.first;

      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_value (
        v,
        i.first_value,
        static_cast<std::size_t> (i.first_size_ind),
        i.first_size_ind == SQL_NULL_DATA);
    }

    // last
    //
    {
      ::std::string& v =
        o.last;

      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_value (
        v,
        i.last_value,
        static_cast<std::size_t> (i.last_size_ind),
        i.last_size_ind == SQL_NULL_DATA);
    }

    // employer_name
    //
    {
      ::std::string& v =
        o.employer_name;

      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_value (
        v,
        i.employer_name_value,
        static_cast<std::size_t> (i.employer_name_size_ind),
        i.employer_name_size_ind == SQL_NULL_DATA);
    }
  }

  access::view_traits_impl< ::employee_employer, id_mssql >::query_base_type
  access::view_traits_impl< ::employee_employer, id_mssql >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "[view_employee].[first], "
      "[view_employee].[last], "
      "[view_employer].[name] ");

    r += "FROM [view_employee]";

    r += " LEFT JOIN [view_employer] ON";
    r += "[view_employee].[employed_by]=[view_employer].[id]";

    if (!q.empty ())
    {
      r += " ";
      r += q.clause_prefix ();
      r += q;
    }

    return r;
  }

  result< access::view_traits_impl< ::employee_employer, id_mssql >::view_type >
  access::view_traits_impl< ::employee_employer, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        false,
        true,
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) mssql::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }

  // employer_age
  //

  void access::view_traits_impl< ::employer_age, id_mssql >::
  bind (mssql::bind* b,
        image_type& i)
  {
    using namespace mssql;

    mssql::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // employer_name
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.employer_name_value;
    b[n].size_ind = &i.employer_name_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.employer_name_value));
    n++;

    // min_age
    //
    b[n].type = mssql::bind::smallint;
    b[n].buffer = &i.min_age_value;
    b[n].size_ind = &i.min_age_size_ind;
    n++;

    // max_age
    //
    b[n].type = mssql::bind::smallint;
    b[n].buffer = &i.max_age_value;
    b[n].size_ind = &i.max_age_size_ind;
    n++;
  }

  void access::view_traits_impl< ::employer_age, id_mssql >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // employer_name
    //
    {
      ::std::string& v =
        o.employer_name;

      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_value (
        v,
        i.employer_name_value,
        static_cast<std::size_t> (i.employer_name_size_ind),
        i.employer_name_size_ind == SQL_NULL_DATA);
    }

    // min_age
    //
    {
      short unsigned int& v =
        o.min_age;

      mssql::value_traits<
          short unsigned int,
          mssql::id_smallint >::set_value (
        v,
        i.min_age_value,
        i.min_age_size_ind == SQL_NULL_DATA);
    }

    // max_age
    //
    {
      short unsigned int& v =
        o.max_age;

      mssql::value_traits<
          short unsigned int,
          mssql::id_smallint >::set_value (
        v,
        i.max_age_value,
        i.max_age_size_ind == SQL_NULL_DATA);
    }
  }

  access::view_traits_impl< ::employer_age, id_mssql >::query_base_type
  access::view_traits_impl< ::employer_age, id_mssql >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "[view_employer].[name], "
      "min([view_employee].[age]), "
      "max([view_employee].[age]) ");

    r += "FROM [view_employee]";

    r += " LEFT JOIN [view_employer] ON";
    r += "[view_employee].[employed_by]=[view_employer].[id]";

    query_base_type c (
      // From employee.hxx:210:3
      (q.empty () ? query_base_type::true_expr : q) + "GROUP BY" + query_columns::employer::name);

    c.optimize ();

    if (!c.empty ())
    {
      r += " ";
      r += c.clause_prefix ();
      r += c;
    }

    return r;
  }

  result< access::view_traits_impl< ::employer_age, id_mssql >::view_type >
  access::view_traits_impl< ::employer_age, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        false,
        true,
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) mssql::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }

  // employee_country
  //

  const char alias_traits<  ::country,
    id_mssql,
    access::view_traits_impl< ::employee_country, id_mssql >::res_country_tag>::
  table_name[] = "[res_country]";

  const char alias_traits<  ::country,
    id_mssql,
    access::view_traits_impl< ::employee_country, id_mssql >::nat_country_tag>::
  table_name[] = "[nat_country]";

  void access::view_traits_impl< ::employee_country, id_mssql >::
  bind (mssql::bind* b,
        image_type& i)
  {
    using namespace mssql;

    mssql::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // first
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.first_value;
    b[n].size_ind = &i.first_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.first_value));
    n++;

    // last
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.last_value;
    b[n].size_ind = &i.last_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.last_value));
    n++;

    // res_country_name
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.res_country_name_value;
    b[n].size_ind = &i.res_country_name_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.res_country_name_value));
    n++;

    // nat_country_name
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.nat_country_name_value;
    b[n].size_ind = &i.nat_country_name_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.nat_country_name_value));
    n++;
  }

  void access::view_traits_impl< ::employee_country, id_mssql >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // first
    //
    {
      ::std::string& v =
        o.first;

      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_value (
        v,
        i.first_value,
        static_cast<std::size_t> (i.first_size_ind),
        i.first_size_ind == SQL_NULL_DATA);
    }

    // last
    //
    {
      ::std::string& v =
        o.last;

      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_value (
        v,
        i.last_value,
        static_cast<std::size_t> (i.last_size_ind),
        i.last_size_ind == SQL_NULL_DATA);
    }

    // res_country_name
    //
    {
      ::std::string& v =
        o.res_country_name;

      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_value (
        v,
        i.res_country_name_value,
        static_cast<std::size_t> (i.res_country_name_size_ind),
        i.res_country_name_size_ind == SQL_NULL_DATA);
    }

    // nat_country_name
    //
    {
      ::std::string& v =
        o.nat_country_name;

      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_value (
        v,
        i.nat_country_name_value,
        static_cast<std::size_t> (i.nat_country_name_size_ind),
        i.nat_country_name_size_ind == SQL_NULL_DATA);
    }
  }

  access::view_traits_impl< ::employee_country, id_mssql >::query_base_type
  access::view_traits_impl< ::employee_country, id_mssql >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "[view_employee].[first], "
      "[view_employee].[last], "
      "[res_country].[name], "
      "[nat_country].[name] ");

    r += "FROM [view_employee]";

    r += " LEFT JOIN [view_country] AS [res_country] ON";
    r += "[view_employee].[residence]=[res_country].[code]";

    r += " LEFT JOIN [view_country] AS [nat_country] ON";
    r += "[view_employee].[nationality]=[nat_country].[code]";

    if (!q.empty ())
    {
      r += " ";
      r += q.clause_prefix ();
      r += q;
    }

    return r;
  }

  result< access::view_traits_impl< ::employee_country, id_mssql >::view_type >
  access::view_traits_impl< ::employee_country, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        false,
        true,
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) mssql::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }

  // employee_country_objects
  //

  const char alias_traits<  ::country,
    id_mssql,
    access::view_traits_impl< ::employee_country_objects, id_mssql >::res_tag>::
  table_name[] = "[res]";

  const char alias_traits<  ::country,
    id_mssql,
    access::view_traits_impl< ::employee_country_objects, id_mssql >::nat_tag>::
  table_name[] = "[nat]";

  void access::view_traits_impl< ::employee_country_objects, id_mssql >::
  bind (mssql::bind* b,
        image_type& i)
  {
    using namespace mssql;

    mssql::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // e
    //
    object_traits_impl< ::employee, id_mssql >::bind (
      b + n, i.e_value, sk);
    n += 7UL;

    // res
    //
    object_traits_impl< ::country, id_mssql >::bind (
      b + n, i.res_value, sk);
    n += 2UL;

    // nat
    //
    object_traits_impl< ::country, id_mssql >::bind (
      b + n, i.nat_value, sk);
    n += 2UL;
  }

  void access::view_traits_impl< ::employee_country_objects, id_mssql >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    if (!session::has_current ())
      throw session_required ();

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    // e pre
    //
    typedef ::employee e_object_type;
    typedef object_traits_impl<e_object_type, id_mssql> e_object_traits;
    typedef e_object_traits::pointer_type e_pointer_type;
    typedef e_object_traits::pointer_traits e_pointer_traits;
    typedef e_object_traits::pointer_cache_traits e_cache_traits;

    e_object_traits::id_type e_id;
    e_pointer_type e_p;
    e_pointer_traits::guard e_pg;
    e_cache_traits::insert_guard e_ig;
    e_object_type* e_o (0);

    {
      if (!(i.e_value.id_size_ind == SQL_NULL_DATA))
      {
        e_id = e_object_traits::id (i.e_value);
        e_p = e_cache_traits::find (*db, e_id);

        if (e_pointer_traits::null_ptr (e_p))
        {
          e_p = object_factory<e_object_type, e_pointer_type>::create ();
          e_pg.reset (e_p);
          e_ig.reset (e_cache_traits::insert (*db, e_id, e_p));
          e_o = e_pointer_traits::get_ptr (e_p);
        }
      }
    }

    // res pre
    //
    typedef ::country res_object_type;
    typedef object_traits_impl<res_object_type, id_mssql> res_object_traits;
    typedef res_object_traits::pointer_type res_pointer_type;
    typedef res_object_traits::pointer_traits res_pointer_traits;
    typedef res_object_traits::pointer_cache_traits res_cache_traits;

    res_object_traits::id_type res_id;
    res_pointer_type res_p;
    res_pointer_traits::guard res_pg;
    res_cache_traits::insert_guard res_ig;
    res_object_type* res_o (0);

    {
      if (!(i.res_value.code_size_ind == SQL_NULL_DATA))
      {
        res_id = res_object_traits::id (i.res_value);
        res_p = res_cache_traits::find (*db, res_id);

        if (res_pointer_traits::null_ptr (res_p))
        {
          res_p = object_factory<res_object_type, res_pointer_type>::create ();
          res_pg.reset (res_p);
          res_ig.reset (res_cache_traits::insert (*db, res_id, res_p));
          res_o = res_pointer_traits::get_ptr (res_p);
        }
      }
    }

    // nat pre
    //
    typedef ::country nat_object_type;
    typedef object_traits_impl<nat_object_type, id_mssql> nat_object_traits;
    typedef nat_object_traits::pointer_type nat_pointer_type;
    typedef nat_object_traits::pointer_traits nat_pointer_traits;
    typedef nat_object_traits::pointer_cache_traits nat_cache_traits;

    nat_object_traits::id_type nat_id;
    nat_pointer_type nat_p;
    nat_pointer_traits::guard nat_pg;
    nat_cache_traits::insert_guard nat_ig;
    nat_object_type* nat_o (0);

    {
      if (!(i.nat_value.code_size_ind == SQL_NULL_DATA))
      {
        nat_id = nat_object_traits::id (i.nat_value);
        nat_p = nat_cache_traits::find (*db, nat_id);

        if (nat_pointer_traits::null_ptr (nat_p))
        {
          nat_p = object_factory<nat_object_type, nat_pointer_type>::create ();
          nat_pg.reset (nat_p);
          nat_ig.reset (nat_cache_traits::insert (*db, nat_id, nat_p));
          nat_o = nat_pointer_traits::get_ptr (nat_p);
        }
      }
    }

    // e
    //
    {
      if (e_o != 0)
      {
        e_object_traits::callback (*db, *e_o, callback_event::pre_load);
        e_object_traits::init (*e_o, i.e_value, db);
        e_object_traits::statements_type& sts (
          conn.statement_cache ().find_object<e_object_type> ());
        e_object_traits::load_ (sts, *e_o, false);
      }
    }

    // res
    //
    {
      if (res_o != 0)
      {
        res_object_traits::callback (*db, *res_o, callback_event::pre_load);
        res_object_traits::init (*res_o, i.res_value, db);
        res_object_traits::statements_type& sts (
          conn.statement_cache ().find_object<res_object_type> ());
        res_object_traits::load_ (sts, *res_o, false);
      }
    }

    // nat
    //
    {
      if (nat_o != 0)
      {
        nat_object_traits::callback (*db, *nat_o, callback_event::pre_load);
        nat_object_traits::init (*nat_o, i.nat_value, db);
        nat_object_traits::statements_type& sts (
          conn.statement_cache ().find_object<nat_object_type> ());
        nat_object_traits::load_ (sts, *nat_o, false);
      }
    }

    // e post
    //
    {
      if (e_o != 0)
      {
        e_object_traits::callback (*db, *e_o, callback_event::post_load);
        e_cache_traits::load (e_ig.position ());
        e_ig.release ();
        e_pg.release ();
      }

      // If a compiler error points to the line below, then
      // it most likely means that a pointer used in view
      // member cannot be initialized from an object pointer.
      //
      o.e = ::std::tr1::shared_ptr< ::employee > (
        e_p);
    }

    // res post
    //
    {
      if (res_o != 0)
      {
        res_object_traits::callback (*db, *res_o, callback_event::post_load);
        res_cache_traits::load (res_ig.position ());
        res_ig.release ();
        res_pg.release ();
      }

      // If a compiler error points to the line below, then
      // it most likely means that a pointer used in view
      // member cannot be initialized from an object pointer.
      //
      o.res = ::std::tr1::shared_ptr< ::country > (
        res_p);
    }

    // nat post
    //
    {
      if (nat_o != 0)
      {
        nat_object_traits::callback (*db, *nat_o, callback_event::post_load);
        nat_cache_traits::load (nat_ig.position ());
        nat_ig.release ();
        nat_pg.release ();
      }

      // If a compiler error points to the line below, then
      // it most likely means that a pointer used in view
      // member cannot be initialized from an object pointer.
      //
      o.nat = ::std::tr1::shared_ptr< ::country > (
        nat_p);
    }
  }

  access::view_traits_impl< ::employee_country_objects, id_mssql >::query_base_type
  access::view_traits_impl< ::employee_country_objects, id_mssql >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "[view_employee].[id], "
      "[view_employee].[first], "
      "[view_employee].[last], "
      "[view_employee].[age], "
      "[view_employee].[residence], "
      "[view_employee].[nationality], "
      "[view_employee].[employed_by], "
      "[res].[code], "
      "[res].[name], "
      "[nat].[code], "
      "[nat].[name] ");

    r += "FROM [view_employee]";

    r += " LEFT JOIN [view_country] AS [res] ON";
    r += "[view_employee].[residence]=[res].[code]";

    r += " LEFT JOIN [view_country] AS [nat] ON";
    r += "[view_employee].[nationality]=[nat].[code]";

    if (!q.empty ())
    {
      r += " ";
      r += q.clause_prefix ();
      r += q;
    }

    return r;
  }

  result< access::view_traits_impl< ::employee_country_objects, id_mssql >::view_type >
  access::view_traits_impl< ::employee_country_objects, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        false,
        true,
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) mssql::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }

  // employer_with_employees
  //

  void access::view_traits_impl< ::employer_with_employees, id_mssql >::
  bind (mssql::bind* b,
        image_type& i)
  {
    using namespace mssql;

    mssql::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // e
    //
    object_traits_impl< ::employer, id_mssql >::bind (
      b + n, i.e_value, sk);
    n += 2UL;
  }

  void access::view_traits_impl< ::employer_with_employees, id_mssql >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    // e pre
    //
    typedef ::employer e_object_type;
    typedef object_traits_impl<e_object_type, id_mssql> e_object_traits;
    typedef e_object_traits::pointer_type e_pointer_type;
    typedef e_object_traits::pointer_traits e_pointer_traits;
    typedef e_object_traits::pointer_cache_traits e_cache_traits;

    e_object_traits::id_type e_id;
    e_pointer_type e_p;
    e_pointer_traits::guard e_pg;
    e_cache_traits::insert_guard e_ig;
    e_object_type* e_o (0);

    {
      if (!(i.e_value.id_size_ind == SQL_NULL_DATA))
      {
        e_id = e_object_traits::id (i.e_value);
        e_p = e_cache_traits::find (*db, e_id);

        if (e_pointer_traits::null_ptr (e_p))
        {
          e_p = object_factory<e_object_type, e_pointer_type>::create ();
          e_pg.reset (e_p);
          e_ig.reset (e_cache_traits::insert (*db, e_id, e_p));
          e_o = e_pointer_traits::get_ptr (e_p);
        }
      }
    }

    // e
    //
    {
      if (e_o != 0)
      {
        e_object_traits::callback (*db, *e_o, callback_event::pre_load);
        e_object_traits::init (*e_o, i.e_value, db);
        e_object_traits::statements_type& sts (
          conn.statement_cache ().find_object<e_object_type> ());
        e_object_traits::load_ (sts, *e_o, false);
      }
    }

    // e post
    //
    {
      if (e_o != 0)
      {
        e_object_traits::callback (*db, *e_o, callback_event::post_load);
        e_cache_traits::load (e_ig.position ());
        e_ig.release ();
        e_pg.release ();
      }

      // If a compiler error points to the line below, then
      // it most likely means that a pointer used in view
      // member cannot be initialized from an object pointer.
      //
      o.e = ::std::tr1::shared_ptr< ::employer > (
        e_p);
    }
  }

  access::view_traits_impl< ::employer_with_employees, id_mssql >::query_base_type
  access::view_traits_impl< ::employer_with_employees, id_mssql >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT DISTINCT "
      "[view_employer].[id], "
      "[view_employer].[name] ");

    r += "FROM [view_employer]";

    r += " INNER JOIN [view_employee] ON";
    r += "[view_employee].[employed_by]=[view_employer].[id]";

    if (!q.empty ())
    {
      r += " ";
      r += q.clause_prefix ();
      r += q;
    }

    return r;
  }

  result< access::view_traits_impl< ::employer_with_employees, id_mssql >::view_type >
  access::view_traits_impl< ::employer_with_employees, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        false,
        true,
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) mssql::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }

  // employee_vacation
  //

  void access::view_traits_impl< ::employee_vacation, id_mssql >::
  bind (mssql::bind* b,
        image_type& i)
  {
    using namespace mssql;

    mssql::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // id
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.id_value;
    b[n].size_ind = &i.id_size_ind;
    n++;

    // days
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.days_value;
    b[n].size_ind = &i.days_size_ind;
    n++;
  }

  void access::view_traits_impl< ::employee_vacation, id_mssql >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      long unsigned int& v =
        o.id;

      mssql::value_traits<
          long unsigned int,
          mssql::id_int >::set_value (
        v,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    // days
    //
    {
      short unsigned int& v =
        o.days;

      mssql::value_traits<
          short unsigned int,
          mssql::id_int >::set_value (
        v,
        i.days_value,
        i.days_size_ind == SQL_NULL_DATA);
    }
  }

  access::view_traits_impl< ::employee_vacation, id_mssql >::query_base_type
  access::view_traits_impl< ::employee_vacation, id_mssql >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT employee_id, vacation_days FROM view_employee_extra");

    if (!q.empty ())
    {
      r += " ";
      r += q.clause_prefix ();
      r += q;
    }

    return r;
  }

  result< access::view_traits_impl< ::employee_vacation, id_mssql >::view_type >
  access::view_traits_impl< ::employee_vacation, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        false,
        true,
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) mssql::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }

  // employee_vacation1
  //

  void access::view_traits_impl< ::employee_vacation1, id_mssql >::
  bind (mssql::bind* b,
        image_type& i)
  {
    using namespace mssql;

    mssql::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // id
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.id_value;
    b[n].size_ind = &i.id_size_ind;
    n++;

    // days
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.days_value;
    b[n].size_ind = &i.days_size_ind;
    n++;
  }

  void access::view_traits_impl< ::employee_vacation1, id_mssql >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      long unsigned int& v =
        o.id;

      mssql::value_traits<
          long unsigned int,
          mssql::id_int >::set_value (
        v,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    // days
    //
    {
      short unsigned int& v =
        o.days;

      mssql::value_traits<
          short unsigned int,
          mssql::id_int >::set_value (
        v,
        i.days_value,
        i.days_size_ind == SQL_NULL_DATA);
    }
  }

  access::view_traits_impl< ::employee_vacation1, id_mssql >::query_base_type
  access::view_traits_impl< ::employee_vacation1, id_mssql >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "[employee_id], "
      "[vacation_days] ");

    r += "FROM [view_employee_extra]";

    if (!q.empty ())
    {
      r += " ";
      r += q.clause_prefix ();
      r += q;
    }

    return r;
  }

  result< access::view_traits_impl< ::employee_vacation1, id_mssql >::view_type >
  access::view_traits_impl< ::employee_vacation1, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        false,
        true,
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) mssql::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }

  // employee_vacation2
  //

  void access::view_traits_impl< ::employee_vacation2, id_mssql >::
  bind (mssql::bind* b,
        image_type& i)
  {
    using namespace mssql;

    mssql::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // first
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.first_value;
    b[n].size_ind = &i.first_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.first_value));
    n++;

    // last
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.last_value;
    b[n].size_ind = &i.last_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.last_value));
    n++;

    // days
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.days_value;
    b[n].size_ind = &i.days_size_ind;
    n++;
  }

  void access::view_traits_impl< ::employee_vacation2, id_mssql >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // first
    //
    {
      ::std::string& v =
        o.first;

      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_value (
        v,
        i.first_value,
        static_cast<std::size_t> (i.first_size_ind),
        i.first_size_ind == SQL_NULL_DATA);
    }

    // last
    //
    {
      ::std::string& v =
        o.last;

      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_value (
        v,
        i.last_value,
        static_cast<std::size_t> (i.last_size_ind),
        i.last_size_ind == SQL_NULL_DATA);
    }

    // days
    //
    {
      short unsigned int& v =
        o.days;

      mssql::value_traits<
          short unsigned int,
          mssql::id_int >::set_value (
        v,
        i.days_value,
        i.days_size_ind == SQL_NULL_DATA);
    }
  }

  access::view_traits_impl< ::employee_vacation2, id_mssql >::query_base_type
  access::view_traits_impl< ::employee_vacation2, id_mssql >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "[view_employee].[first], "
      "[view_employee].[last], "
      "[view_employee_extra].[vacation_days] ");

    r += "FROM [view_employee_extra]";

    r += " LEFT JOIN [view_employee] ON";
    // From employee.hxx:315:5
    r += "view_employee_extra.employee_id = " + query_columns::id;

    if (!q.empty ())
    {
      r += " ";
      r += q.clause_prefix ();
      r += q;
    }

    return r;
  }

  result< access::view_traits_impl< ::employee_vacation2, id_mssql >::view_type >
  access::view_traits_impl< ::employee_vacation2, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        false,
        true,
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) mssql::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }

  // employee_prev_employer
  //

  void access::view_traits_impl< ::employee_prev_employer, id_mssql >::
  bind (mssql::bind* b,
        image_type& i)
  {
    using namespace mssql;

    mssql::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // first
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.first_value;
    b[n].size_ind = &i.first_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.first_value));
    n++;

    // last
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.last_value;
    b[n].size_ind = &i.last_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.last_value));
    n++;

    // prev_employer_name
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.prev_employer_name_value;
    b[n].size_ind = &i.prev_employer_name_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.prev_employer_name_value));
    n++;
  }

  void access::view_traits_impl< ::employee_prev_employer, id_mssql >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // first
    //
    {
      ::std::string& v =
        o.first;

      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_value (
        v,
        i.first_value,
        static_cast<std::size_t> (i.first_size_ind),
        i.first_size_ind == SQL_NULL_DATA);
    }

    // last
    //
    {
      ::std::string& v =
        o.last;

      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_value (
        v,
        i.last_value,
        static_cast<std::size_t> (i.last_size_ind),
        i.last_size_ind == SQL_NULL_DATA);
    }

    // prev_employer_name
    //
    {
      ::odb::nullable< ::std::basic_string< char > >& v =
        o.prev_employer_name;

      mssql::value_traits<
          ::odb::nullable< ::std::basic_string< char > >,
          mssql::id_string >::set_value (
        v,
        i.prev_employer_name_value,
        static_cast<std::size_t> (i.prev_employer_name_size_ind),
        i.prev_employer_name_size_ind == SQL_NULL_DATA);
    }
  }

  access::view_traits_impl< ::employee_prev_employer, id_mssql >::query_base_type
  access::view_traits_impl< ::employee_prev_employer, id_mssql >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "[view_employee].[first], "
      "[view_employee].[last], "
      "[view_employer].[name] ");

    r += "FROM [view_employee]";

    r += " LEFT JOIN [view_employee_extra] AS [extra] ON";
    // From employee.hxx:335:5
    r += "extra.employee_id = " + query_columns::employee::id;

    r += " LEFT JOIN [view_employer] ON";
    // From employee.hxx:337:5
    r += "extra.previous_employer_id = " + query_columns::employer::id;

    if (!q.empty ())
    {
      r += " ";
      r += q.clause_prefix ();
      r += q;
    }

    return r;
  }

  result< access::view_traits_impl< ::employee_prev_employer, id_mssql >::view_type >
  access::view_traits_impl< ::employee_prev_employer, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        false,
        true,
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) mssql::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }
}

#include <odb/post.hxx>
