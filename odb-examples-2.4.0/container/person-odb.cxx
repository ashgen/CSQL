// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "person-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy


#include <odb/mssql/traits.hxx>
#include <odb/mssql/database.hxx>
#include <odb/mssql/transaction.hxx>
#include <odb/mssql/connection.hxx>
#include <odb/mssql/statement.hxx>
#include <odb/mssql/statement-cache.hxx>
#include <odb/mssql/simple-object-statements.hxx>
#include <odb/mssql/container-statements.hxx>
#include <odb/mssql/exceptions.hxx>

namespace odb
{
  // person
  //

  struct access::object_traits_impl< ::person, id_mssql >::extra_statement_cache_type
  {
    mssql::container_statements_impl< nicknames_traits > nicknames_;
    mssql::container_statements_impl< emails_traits > emails_;
    mssql::container_statements_impl< age_weight_traits > age_weight_;

    extra_statement_cache_type (
      mssql::connection& c,
      image_type&,
      id_image_type&,
      mssql::binding& id,
      mssql::binding&)
    : nicknames_ (c, id),
      emails_ (c, id),
      age_weight_ (c, id)
    {
    }
  };

  // nicknames_
  //

  const char access::object_traits_impl< ::person, id_mssql >::nicknames_traits::
  select_statement[] =
  "SELECT "
  "[container_person_nicknames].[index], "
  "[container_person_nicknames].[value] "
  "FROM [container_person_nicknames] "
  "WHERE [container_person_nicknames].[object_id]=? ORDER BY [container_person_nicknames].[index]";

  const char access::object_traits_impl< ::person, id_mssql >::nicknames_traits::
  insert_statement[] =
  "INSERT INTO [container_person_nicknames] "
  "([object_id], "
  "[index], "
  "[value]) "
  "VALUES "
  "(?, ?, ?)";

  const char access::object_traits_impl< ::person, id_mssql >::nicknames_traits::
  delete_statement[] =
  "DELETE FROM [container_person_nicknames] "
  "WHERE [object_id]=?";

  void access::object_traits_impl< ::person, id_mssql >::nicknames_traits::
  bind (mssql::bind* b,
        const mssql::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace mssql;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // index
    //
    b[n].type = mssql::bind::bigint;
    b[n].buffer = &d.index_value;
    b[n].size_ind = &d.index_size_ind;
    n++;

    // value
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &d.value_value;
    b[n].size_ind = &d.value_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (d.value_value));
  }

  void access::object_traits_impl< ::person, id_mssql >::nicknames_traits::
  init (data_image_type& i,
        index_type* j,
        const value_type& v)
  {
    using namespace mssql;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    // index
    //
    if (j != 0)
    {
      bool is_null (false);
      mssql::value_traits<
          index_type,
          mssql::id_bigint >::set_image (
        i.index_value, is_null, *j);
      i.index_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // value
    //
    {
      bool is_null (false);
      std::size_t size (0);
      mssql::value_traits<
          value_type,
          mssql::id_string >::set_image (
        i.value_value,
        sizeof (i.value_value) - 1,
        size,
        is_null,
        v);
      i.value_size_ind =
        is_null ? SQL_NULL_DATA : static_cast<SQLLEN> (size);
    }
  }

  void access::object_traits_impl< ::person, id_mssql >::nicknames_traits::
  init (index_type& j,
        value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // index
    //
    {
      mssql::value_traits<
          index_type,
          mssql::id_bigint >::set_value (
        j,
        i.index_value,
        i.index_size_ind == SQL_NULL_DATA);
    }

    // value
    //
    {
      mssql::value_traits<
          value_type,
          mssql::id_string >::set_value (
        v,
        i.value_value,
        static_cast<std::size_t> (i.value_size_ind),
        i.value_size_ind == SQL_NULL_DATA);
    }
  }

  void access::object_traits_impl< ::person, id_mssql >::nicknames_traits::
  insert (index_type i, const value_type& v, void* d)
  {
    using namespace mssql;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (di, &i, v);

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    if (!sts.insert_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::object_traits_impl< ::person, id_mssql >::nicknames_traits::
  select (index_type& i, value_type& v, void* d)
  {
    using namespace mssql;
    using mssql::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (i, v, di, &sts.connection ().database ());

    sts.select_statement ().stream_result ();

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());
    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::person, id_mssql >::nicknames_traits::
  delete_ (void* d)
  {
    using namespace mssql;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_statement ().execute ();
  }

  void access::object_traits_impl< ::person, id_mssql >::nicknames_traits::
  persist (const container_type& c,
           statements_type& sts)
  {
    using namespace mssql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::persist (c, fs);
  }

  void access::object_traits_impl< ::person, id_mssql >::nicknames_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace mssql;
    using mssql::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());
    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::load (c, more, fs);
  }

  void access::object_traits_impl< ::person, id_mssql >::nicknames_traits::
  update (const container_type& c,
          statements_type& sts)
  {
    using namespace mssql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::update (c, fs);
  }

  void access::object_traits_impl< ::person, id_mssql >::nicknames_traits::
  erase (statements_type& sts)
  {
    using namespace mssql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::erase (fs);
  }

  // emails_
  //

  const char access::object_traits_impl< ::person, id_mssql >::emails_traits::
  select_statement[] =
  "SELECT "
  "[container_person_emails].[value] "
  "FROM [container_person_emails] "
  "WHERE [container_person_emails].[object_id]=?";

  const char access::object_traits_impl< ::person, id_mssql >::emails_traits::
  insert_statement[] =
  "INSERT INTO [container_person_emails] "
  "([object_id], "
  "[value]) "
  "VALUES "
  "(?, ?)";

  const char access::object_traits_impl< ::person, id_mssql >::emails_traits::
  delete_statement[] =
  "DELETE FROM [container_person_emails] "
  "WHERE [object_id]=?";

  void access::object_traits_impl< ::person, id_mssql >::emails_traits::
  bind (mssql::bind* b,
        const mssql::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace mssql;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // value
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &d.value_value;
    b[n].size_ind = &d.value_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (d.value_value));
  }

  void access::object_traits_impl< ::person, id_mssql >::emails_traits::
  init (data_image_type& i,
        const value_type& v)
  {
    using namespace mssql;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    // value
    //
    {
      bool is_null (false);
      std::size_t size (0);
      mssql::value_traits<
          value_type,
          mssql::id_string >::set_image (
        i.value_value,
        sizeof (i.value_value) - 1,
        size,
        is_null,
        v);
      i.value_size_ind =
        is_null ? SQL_NULL_DATA : static_cast<SQLLEN> (size);
    }
  }

  void access::object_traits_impl< ::person, id_mssql >::emails_traits::
  init (value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // value
    //
    {
      mssql::value_traits<
          value_type,
          mssql::id_string >::set_value (
        v,
        i.value_value,
        static_cast<std::size_t> (i.value_size_ind),
        i.value_size_ind == SQL_NULL_DATA);
    }
  }

  void access::object_traits_impl< ::person, id_mssql >::emails_traits::
  insert (const value_type& v, void* d)
  {
    using namespace mssql;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (di, v);

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    if (!sts.insert_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::object_traits_impl< ::person, id_mssql >::emails_traits::
  select (value_type& v, void* d)
  {
    using namespace mssql;
    using mssql::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (v, di, &sts.connection ().database ());

    sts.select_statement ().stream_result ();

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());
    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::person, id_mssql >::emails_traits::
  delete_ (void* d)
  {
    using namespace mssql;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_statement ().execute ();
  }

  void access::object_traits_impl< ::person, id_mssql >::emails_traits::
  persist (const container_type& c,
           statements_type& sts)
  {
    using namespace mssql;

    functions_type& fs (sts.functions ());
    container_traits_type::persist (c, fs);
  }

  void access::object_traits_impl< ::person, id_mssql >::emails_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace mssql;
    using mssql::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());
    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    container_traits_type::load (c, more, fs);
  }

  void access::object_traits_impl< ::person, id_mssql >::emails_traits::
  update (const container_type& c,
          statements_type& sts)
  {
    using namespace mssql;

    functions_type& fs (sts.functions ());
    container_traits_type::update (c, fs);
  }

  void access::object_traits_impl< ::person, id_mssql >::emails_traits::
  erase (statements_type& sts)
  {
    using namespace mssql;

    functions_type& fs (sts.functions ());
    container_traits_type::erase (fs);
  }

  // age_weight_
  //

  const char access::object_traits_impl< ::person, id_mssql >::age_weight_traits::
  select_statement[] =
  "SELECT "
  "[container_person_age_weight].[key], "
  "[container_person_age_weight].[value] "
  "FROM [container_person_age_weight] "
  "WHERE [container_person_age_weight].[object_id]=?";

  const char access::object_traits_impl< ::person, id_mssql >::age_weight_traits::
  insert_statement[] =
  "INSERT INTO [container_person_age_weight] "
  "([object_id], "
  "[key], "
  "[value]) "
  "VALUES "
  "(?, ?, ?)";

  const char access::object_traits_impl< ::person, id_mssql >::age_weight_traits::
  delete_statement[] =
  "DELETE FROM [container_person_age_weight] "
  "WHERE [object_id]=?";

  void access::object_traits_impl< ::person, id_mssql >::age_weight_traits::
  bind (mssql::bind* b,
        const mssql::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace mssql;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // key
    //
    b[n].type = mssql::bind::smallint;
    b[n].buffer = &d.key_value;
    b[n].size_ind = &d.key_size_ind;
    n++;

    // value
    //
    b[n].type = mssql::bind::float4;
    b[n].buffer = &d.value_value;
    b[n].size_ind = &d.value_size_ind;
    b[n].capacity = 24;
  }

  void access::object_traits_impl< ::person, id_mssql >::age_weight_traits::
  init (data_image_type& i,
        const key_type* k,
        const value_type& v)
  {
    using namespace mssql;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    // key
    //
    if (k != 0)
    {
      bool is_null (false);
      mssql::value_traits<
          key_type,
          mssql::id_smallint >::set_image (
        i.key_value, is_null, *k);
      i.key_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // value
    //
    {
      bool is_null (false);
      mssql::value_traits<
          value_type,
          mssql::id_float4 >::set_image (
        i.value_value, is_null, v);
      i.value_size_ind = is_null ? SQL_NULL_DATA : 0;
    }
  }

  void access::object_traits_impl< ::person, id_mssql >::age_weight_traits::
  init (key_type& k,
        value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // key
    //
    {
      mssql::value_traits<
          key_type,
          mssql::id_smallint >::set_value (
        k,
        i.key_value,
        i.key_size_ind == SQL_NULL_DATA);
    }

    // value
    //
    {
      mssql::value_traits<
          value_type,
          mssql::id_float4 >::set_value (
        v,
        i.value_value,
        i.value_size_ind == SQL_NULL_DATA);
    }
  }

  void access::object_traits_impl< ::person, id_mssql >::age_weight_traits::
  insert (const key_type& k, const value_type& v, void* d)
  {
    using namespace mssql;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (di, &k, v);

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    if (!sts.insert_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::object_traits_impl< ::person, id_mssql >::age_weight_traits::
  select (key_type& k, value_type& v, void* d)
  {
    using namespace mssql;
    using mssql::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (k, v, di, &sts.connection ().database ());

    sts.select_statement ().stream_result ();

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());
    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::person, id_mssql >::age_weight_traits::
  delete_ (void* d)
  {
    using namespace mssql;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_statement ().execute ();
  }

  void access::object_traits_impl< ::person, id_mssql >::age_weight_traits::
  persist (const container_type& c,
           statements_type& sts)
  {
    using namespace mssql;

    functions_type& fs (sts.functions ());
    container_traits_type::persist (c, fs);
  }

  void access::object_traits_impl< ::person, id_mssql >::age_weight_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace mssql;
    using mssql::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());
    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    container_traits_type::load (c, more, fs);
  }

  void access::object_traits_impl< ::person, id_mssql >::age_weight_traits::
  update (const container_type& c,
          statements_type& sts)
  {
    using namespace mssql;

    functions_type& fs (sts.functions ());
    container_traits_type::update (c, fs);
  }

  void access::object_traits_impl< ::person, id_mssql >::age_weight_traits::
  erase (statements_type& sts)
  {
    using namespace mssql;

    functions_type& fs (sts.functions ());
    container_traits_type::erase (fs);
  }

  access::object_traits_impl< ::person, id_mssql >::id_type
  access::object_traits_impl< ::person, id_mssql >::
  id (const id_image_type& i)
  {
    mssql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mssql::value_traits<
          long unsigned int,
          mssql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    return id;
  }

  void access::object_traits_impl< ::person, id_mssql >::
  bind (mssql::bind* b,
        image_type& i,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = mssql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].size_ind = &i.id_size_ind;
      n++;
    }

    // first_
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.first_value;
    b[n].size_ind = &i.first_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.first_value));
    n++;

    // last_
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.last_value;
    b[n].size_ind = &i.last_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.last_value));
    n++;
  }

  void access::object_traits_impl< ::person, id_mssql >::
  bind (mssql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = mssql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].size_ind = &i.id_size_ind;
  }

  void access::object_traits_impl< ::person, id_mssql >::
  init (image_type& i,
        const object_type& o,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    // first_
    //
    {
      ::std::string const& v =
        o.first_;

      bool is_null (false);
      std::size_t size (0);
      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_image (
        i.first_value,
        sizeof (i.first_value) - 1,
        size,
        is_null,
        v);
      i.first_size_ind =
        is_null ? SQL_NULL_DATA : static_cast<SQLLEN> (size);
    }

    // last_
    //
    {
      ::std::string const& v =
        o.last_;

      bool is_null (false);
      std::size_t size (0);
      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_image (
        i.last_value,
        sizeof (i.last_value) - 1,
        size,
        is_null,
        v);
      i.last_size_ind =
        is_null ? SQL_NULL_DATA : static_cast<SQLLEN> (size);
    }
  }

  void access::object_traits_impl< ::person, id_mssql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      mssql::value_traits<
          long unsigned int,
          mssql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    // first_
    //
    {
      ::std::string& v =
        o.first_;

      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_value (
        v,
        i.first_value,
        static_cast<std::size_t> (i.first_size_ind),
        i.first_size_ind == SQL_NULL_DATA);
    }

    // last_
    //
    {
      ::std::string& v =
        o.last_;

      mssql::value_traits<
          ::std::string,
          mssql::id_string >::set_value (
        v,
        i.last_value,
        static_cast<std::size_t> (i.last_size_ind),
        i.last_size_ind == SQL_NULL_DATA);
    }
  }

  void access::object_traits_impl< ::person, id_mssql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mssql::value_traits<
          long unsigned int,
          mssql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_size_ind = is_null ? SQL_NULL_DATA : 0;
    }
  }

  const char access::object_traits_impl< ::person, id_mssql >::persist_statement[] =
  "INSERT INTO [container_person] "
  "([first], "
  "[last]) "
  "OUTPUT INSERTED.[id] "
  "VALUES "
  "(?, ?)";

  const char access::object_traits_impl< ::person, id_mssql >::find_statement[] =
  "SELECT "
  "[container_person].[id], "
  "[container_person].[first], "
  "[container_person].[last] "
  "FROM [container_person] "
  "WHERE [container_person].[id]=?";

  const char access::object_traits_impl< ::person, id_mssql >::update_statement[] =
  "UPDATE [container_person] "
  "SET "
  "[first]=?, "
  "[last]=? "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::person, id_mssql >::erase_statement[] =
  "DELETE FROM [container_person] "
  "WHERE [id]=?";

  void access::object_traits_impl< ::person, id_mssql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    init (im, obj, statement_insert);

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    id_image_type& i (sts.id_image ());
    init (i, obj.id_);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // nicknames_
    //
    {
      ::names const& v =
        obj.nicknames_;

      nicknames_traits::persist (
        v,
        esc.nicknames_);
    }

    // emails_
    //
    {
      ::person::emails_type const& v =
        obj.emails_;

      emails_traits::persist (
        v,
        esc.emails_);
    }

    // age_weight_
    //
    {
      ::age_weight_map const& v =
        obj.age_weight_;

      age_weight_traits::persist (
        v,
        esc.age_weight_);
    }

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::person, id_mssql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;
    using mssql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mssql::transaction& tr (mssql::transaction::current ());
    mssql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    init (im, obj, statement_update);

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // nicknames_
    //
    {
      ::names const& v =
        obj.nicknames_;

      nicknames_traits::update (
        v,
        esc.nicknames_);
    }

    // emails_
    //
    {
      ::person::emails_type const& v =
        obj.emails_;

      emails_traits::update (
        v,
        esc.emails_);
    }

    // age_weight_
    //
    {
      ::age_weight_map const& v =
        obj.age_weight_;

      age_weight_traits::update (
        v,
        esc.age_weight_);
    }

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::person, id_mssql >::
  erase (database& db, const id_type& id)
  {
    using namespace mssql;

    ODB_POTENTIALLY_UNUSED (db);

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // nicknames_
    //
    nicknames_traits::erase (
      esc.nicknames_);

    // emails_
    //
    emails_traits::erase (
      esc.emails_);

    // age_weight_
    //
    age_weight_traits::erase (
      esc.age_weight_);

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::person, id_mssql >::pointer_type
  access::object_traits_impl< ::person, id_mssql >::
  find (database& db, const id_type& id)
  {
    using namespace mssql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    auto_result ar;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();

      ar.set (sts.find_statement ());
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      st.stream_result ();
      ar.free ();
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::person, id_mssql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);
    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::person, id_mssql >::
  reload (database& db, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::person, id_mssql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mssql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r != select_statement::no_data)
    {
      ar.release ();
      return true;
    }
    else
      return false;
  }

  void access::object_traits_impl< ::person, id_mssql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // nicknames_
    //
    {
      ::names& v =
        obj.nicknames_;

      nicknames_traits::load (
        v,
        esc.nicknames_);
    }

    // emails_
    //
    {
      ::person::emails_type& v =
        obj.emails_;

      emails_traits::load (
        v,
        esc.emails_);
    }

    // age_weight_
    //
    {
      ::age_weight_map& v =
        obj.age_weight_;

      age_weight_traits::load (
        v,
        esc.age_weight_);
    }
  }
}

#include <odb/post.hxx>
