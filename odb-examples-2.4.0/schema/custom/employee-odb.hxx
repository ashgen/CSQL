// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef EMPLOYEE_ODB_HXX
#define EMPLOYEE_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "employee.hxx"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/tr1/wrapper-traits.hxx>
#include <odb/tr1/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // employer
  //
  template <>
  struct class_traits< ::employer >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::employer >
  {
    public:
    typedef ::employer object_type;
    typedef ::std::tr1::shared_ptr< ::employer > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::std::string id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // employee
  //
  template <>
  struct class_traits< ::employee >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::employee >
  {
    public:
    typedef ::employee object_type;
    typedef ::std::tr1::shared_ptr< ::employee > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mssql/version.hxx>
#include <odb/mssql/forward.hxx>
#include <odb/mssql/binding.hxx>
#include <odb/mssql/mssql-types.hxx>
#include <odb/mssql/query.hxx>

namespace odb
{
  // name
  //
  template <>
  class access::composite_value_traits< ::name, id_mssql >
  {
    public:
    typedef ::name value_type;

    struct image_type
    {
      // first_
      //
      char first_value[256];
      SQLLEN first_size_ind;

      // last_
      //
      char last_value[256];
      SQLLEN last_size_ind;
    };

    static void
    bind (mssql::bind*,
          image_type&,
          mssql::statement_kind);

    static void
    init (image_type&,
          const value_type&,
          mssql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              mssql::statement_kind);

    static const std::size_t column_count = 2UL;
  };

  // employer
  //
  template <typename A>
  struct query_columns< ::employer, id_mssql, A >
  {
    // name
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::std::string,
        mssql::id_string >::query_type,
      mssql::id_string >
    name_type_;

    static const name_type_ name;
  };

  template <typename A>
  const typename query_columns< ::employer, id_mssql, A >::name_type_
  query_columns< ::employer, id_mssql, A >::
  name (A::table_name, "[name]", 0, 255);

  template <typename A>
  struct pointer_query_columns< ::employer, id_mssql, A >:
    query_columns< ::employer, id_mssql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::employer, id_mssql >:
    public access::object_traits< ::employer >
  {
    public:
    static const std::size_t batch = 1UL;

    static const bool rowversion = false;

    struct id_image_type
    {
      char id_value[256];
      SQLLEN id_size_ind;

      std::size_t version;
    };

    struct image_type
    {
      // name_
      //
      char name_value[256];
      SQLLEN name_size_ind;

      std::size_t version;

      mssql::change_callback change_callback_;

      mssql::change_callback*
      change_callback ()
      {
        return &change_callback_;
      }
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static void
    bind (mssql::bind*,
          image_type&,
          mssql::statement_kind);

    static void
    bind (mssql::bind*, id_image_type&);

    static void
    init (image_type&,
          const object_type&,
          mssql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mssql::object_statements<object_type> statements_type;

    typedef mssql::query_base query_base_type;

    static const std::size_t column_count = 1UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::employer, id_common >:
    public access::object_traits_impl< ::employer, id_mssql >
  {
  };

  // employee
  //
  template <typename A>
  struct pointer_query_columns< ::employee, id_mssql, A >
  {
    // id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        long unsigned int,
        mssql::id_int >::query_type,
      mssql::id_int >
    id_type_;

    static const id_type_ id;

    // name
    //
    struct name_class_
    {
      name_class_ ()
      {
      }

      // first
      //
      typedef
      mssql::query_column<
        mssql::value_traits<
          ::std::string,
          mssql::id_string >::query_type,
        mssql::id_string >
      first_type_;

      static const first_type_ first;

      // last
      //
      typedef
      mssql::query_column<
        mssql::value_traits<
          ::std::string,
          mssql::id_string >::query_type,
        mssql::id_string >
      last_type_;

      static const last_type_ last;
    };

    static const name_class_ name;

    // employer
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::std::string,
        mssql::id_string >::query_type,
      mssql::id_string >
    employer_type_;

    static const employer_type_ employer;
  };

  template <typename A>
  const typename pointer_query_columns< ::employee, id_mssql, A >::id_type_
  pointer_query_columns< ::employee, id_mssql, A >::
  id (A::table_name, "[ssn]", 0);

  template <typename A>
  const typename pointer_query_columns< ::employee, id_mssql, A >::name_class_::first_type_
  pointer_query_columns< ::employee, id_mssql, A >::name_class_::
  first (A::table_name, "[first_name]", 0, 255);

  template <typename A>
  const typename pointer_query_columns< ::employee, id_mssql, A >::name_class_::last_type_
  pointer_query_columns< ::employee, id_mssql, A >::name_class_::
  last (A::table_name, "[last_name]", 0, 255);

  template <typename A>
  const typename pointer_query_columns< ::employee, id_mssql, A >::name_class_
  pointer_query_columns< ::employee, id_mssql, A >::name;

  template <typename A>
  const typename pointer_query_columns< ::employee, id_mssql, A >::employer_type_
  pointer_query_columns< ::employee, id_mssql, A >::
  employer (A::table_name, "[employer]", 0, 255);

  template <>
  class access::object_traits_impl< ::employee, id_mssql >:
    public access::object_traits< ::employee >
  {
    public:
    static const std::size_t batch = 1UL;

    static const bool rowversion = false;

    struct id_image_type
    {
      int id_value;
      SQLLEN id_size_ind;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      int id_value;
      SQLLEN id_size_ind;

      // name_
      //
      composite_value_traits< ::employee::name_type, id_mssql >::image_type name_value;

      // employer_
      //
      char employer_value[256];
      SQLLEN employer_size_ind;

      std::size_t version;

      mssql::change_callback change_callback_;

      mssql::change_callback*
      change_callback ()
      {
        return &change_callback_;
      }
    };

    struct extra_statement_cache_type;

    // degrees_
    //
    struct degrees_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::employee::degrees_type container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mssql::container_statements< degrees_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        char value_value[256];
        SQLLEN value_size_ind;

        std::size_t version;
      };

      static void
      bind (mssql::bind*,
            const mssql::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      init (data_image_type&,
            const value_type&);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    struct employer_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static void
    bind (mssql::bind*,
          image_type&,
          mssql::statement_kind);

    static void
    bind (mssql::bind*, id_image_type&);

    static void
    init (image_type&,
          const object_type&,
          mssql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mssql::object_statements<object_type> statements_type;

    typedef mssql::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::employee, id_common >:
    public access::object_traits_impl< ::employee, id_mssql >
  {
  };

  // employer
  //
  // employee
  //
  template <>
  struct alias_traits<
    ::employer,
    id_mssql,
    access::object_traits_impl< ::employee, id_mssql >::employer_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::employee, id_mssql >
  {
    // employer
    //
    typedef
    odb::alias_traits<
      ::employer,
      id_mssql,
      access::object_traits_impl< ::employee, id_mssql >::employer_tag>
    employer_alias_;
  };

  template <typename A>
  struct query_columns< ::employee, id_mssql, A >:
    query_columns_base< ::employee, id_mssql >
  {
    // id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        long unsigned int,
        mssql::id_int >::query_type,
      mssql::id_int >
    id_type_;

    static const id_type_ id;

    // name
    //
    struct name_class_
    {
      name_class_ ()
      {
      }

      // first
      //
      typedef
      mssql::query_column<
        mssql::value_traits<
          ::std::string,
          mssql::id_string >::query_type,
        mssql::id_string >
      first_type_;

      static const first_type_ first;

      // last
      //
      typedef
      mssql::query_column<
        mssql::value_traits<
          ::std::string,
          mssql::id_string >::query_type,
        mssql::id_string >
      last_type_;

      static const last_type_ last;
    };

    static const name_class_ name;

    // employer
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::std::string,
        mssql::id_string >::query_type,
      mssql::id_string >
    employer_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::employer,
        id_mssql,
        employer_alias_ > >
    employer_pointer_type_;

    struct employer_type_: employer_pointer_type_, employer_column_type_
    {
      employer_type_ (const char* t,
                      const char* c,
                      const char* conv,
                      unsigned short p = 0,
                      unsigned short s = 0xFFFF)
        : employer_column_type_ (t, c, conv, p, s)
      {
      }
    };

    static const employer_type_ employer;
  };

  template <typename A>
  const typename query_columns< ::employee, id_mssql, A >::id_type_
  query_columns< ::employee, id_mssql, A >::
  id (A::table_name, "[ssn]", 0);

  template <typename A>
  const typename query_columns< ::employee, id_mssql, A >::name_class_::first_type_
  query_columns< ::employee, id_mssql, A >::name_class_::
  first (A::table_name, "[first_name]", 0, 255);

  template <typename A>
  const typename query_columns< ::employee, id_mssql, A >::name_class_::last_type_
  query_columns< ::employee, id_mssql, A >::name_class_::
  last (A::table_name, "[last_name]", 0, 255);

  template <typename A>
  const typename query_columns< ::employee, id_mssql, A >::name_class_
  query_columns< ::employee, id_mssql, A >::name;

  template <typename A>
  const typename query_columns< ::employee, id_mssql, A >::employer_type_
  query_columns< ::employee, id_mssql, A >::
  employer (A::table_name, "[employer]", 0, 255);
}

#include "employee-odb.ixx"

#include <odb/post.hxx>

#endif // EMPLOYEE_ODB_HXX
