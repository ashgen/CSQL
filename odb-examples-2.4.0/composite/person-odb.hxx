// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef PERSON_ODB_HXX
#define PERSON_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "person.hxx"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // person
  //
  template <>
  struct class_traits< ::person >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::person >
  {
    public:
    typedef ::person object_type;
    typedef ::person* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::email_address id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mssql/version.hxx>
#include <odb/mssql/forward.hxx>
#include <odb/mssql/binding.hxx>
#include <odb/mssql/mssql-types.hxx>
#include <odb/mssql/query.hxx>

namespace odb
{
  // basic_name
  //
  template <>
  class access::composite_value_traits< ::basic_name, id_mssql >
  {
    public:
    typedef ::basic_name value_type;

    struct image_type
    {
      // first_
      //
      char first_value[513];
      SQLLEN first_size_ind;

      // last_
      //
      char last_value[513];
      SQLLEN last_size_ind;
    };

    static void
    bind (mssql::bind*,
          image_type&,
          mssql::statement_kind);

    static void
    init (image_type&,
          const value_type&,
          mssql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              mssql::statement_kind);

    static const std::size_t column_count = 2UL;
  };

  // name_extras
  //
  template <>
  class access::composite_value_traits< ::name_extras, id_mssql >
  {
    public:
    typedef ::name_extras value_type;

    struct image_type
    {
      // nickname_
      //
      char nickname_value[513];
      SQLLEN nickname_size_ind;
    };

    // aliases_
    //
    struct aliases_traits
    {
      typedef ::basic_names container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mssql::container_statements< aliases_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        long long index_value;
        SQLLEN index_size_ind;

        // value
        //
        composite_value_traits< value_type, id_mssql >::image_type value_value;

        std::size_t version;
      };

      static void
      bind (mssql::bind*,
            const mssql::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    static void
    bind (mssql::bind*,
          image_type&,
          mssql::statement_kind);

    static void
    init (image_type&,
          const value_type&,
          mssql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 1UL;
  };

  // name
  //
  template <>
  class access::composite_value_traits< ::name, id_mssql >
  {
    public:
    typedef ::name value_type;

    struct image_type: composite_value_traits< ::basic_name, id_mssql >::image_type
    {
      // title_
      //
      char title_value[513];
      SQLLEN title_size_ind;

      // extras_
      //
      composite_value_traits< ::name_extras, id_mssql >::image_type extras_value;
    };

    static void
    bind (mssql::bind*,
          image_type&,
          mssql::statement_kind);

    static void
    init (image_type&,
          const value_type&,
          mssql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 4UL;
  };

  // phone_numbers
  //
  template <>
  class access::composite_value_traits< ::phone_numbers, id_mssql >
  {
    public:
    typedef ::phone_numbers value_type;

    struct image_type
    {
      // first
      //
      char first_value[513];
      SQLLEN first_size_ind;

      // second
      //
      char second_value[513];
      SQLLEN second_size_ind;
    };

    static void
    bind (mssql::bind*,
          image_type&,
          mssql::statement_kind);

    static void
    init (image_type&,
          const value_type&,
          mssql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              mssql::statement_kind);

    static const std::size_t column_count = 2UL;
  };

  // email_address
  //
  template <>
  class access::composite_value_traits< ::email_address, id_mssql >
  {
    public:
    typedef ::email_address value_type;

    struct image_type
    {
      // recipient_
      //
      char recipient_value[513];
      SQLLEN recipient_size_ind;

      // domain_
      //
      char domain_value[513];
      SQLLEN domain_size_ind;
    };

    static void
    bind (mssql::bind*,
          image_type&,
          mssql::statement_kind);

    static void
    init (image_type&,
          const value_type&,
          mssql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              mssql::statement_kind);

    static const std::size_t column_count = 2UL;
  };

  // person
  //
  template <typename A>
  struct query_columns< ::person, id_mssql, A >
  {
    // email
    //
    struct email_class_
    {
      email_class_ ()
      {
      }

      // recipient
      //
      typedef
      mssql::query_column<
        mssql::value_traits<
          ::std::string,
          mssql::id_string >::query_type,
        mssql::id_string >
      recipient_type_;

      static const recipient_type_ recipient;

      // domain
      //
      typedef
      mssql::query_column<
        mssql::value_traits<
          ::std::string,
          mssql::id_string >::query_type,
        mssql::id_string >
      domain_type_;

      static const domain_type_ domain;
    };

    static const email_class_ email;

    // name
    //
    struct name_class_
    {
      name_class_ ()
      {
      }

      // first
      //
      typedef
      mssql::query_column<
        mssql::value_traits<
          ::std::string,
          mssql::id_string >::query_type,
        mssql::id_string >
      first_type_;

      static const first_type_ first;

      // last
      //
      typedef
      mssql::query_column<
        mssql::value_traits<
          ::std::string,
          mssql::id_string >::query_type,
        mssql::id_string >
      last_type_;

      static const last_type_ last;

      // title
      //
      typedef
      mssql::query_column<
        mssql::value_traits<
          ::std::string,
          mssql::id_string >::query_type,
        mssql::id_string >
      title_type_;

      static const title_type_ title;

      // extras
      //
      struct extras_class_1_
      {
        extras_class_1_ ()
        {
        }

        // nickname
        //
        typedef
        mssql::query_column<
          mssql::value_traits<
            ::std::string,
            mssql::id_string >::query_type,
          mssql::id_string >
        nickname_type_;

        static const nickname_type_ nickname;
      };

      static const extras_class_1_ extras;
    };

    static const name_class_ name;

    // phone
    //
    struct phone_class_
    {
      phone_class_ ()
      {
      }

      // first
      //
      typedef
      mssql::query_column<
        mssql::value_traits<
          ::std::basic_string< char >,
          mssql::id_string >::query_type,
        mssql::id_string >
      first_type_;

      static const first_type_ first;

      // second
      //
      typedef
      mssql::query_column<
        mssql::value_traits<
          ::std::basic_string< char >,
          mssql::id_string >::query_type,
        mssql::id_string >
      second_type_;

      static const second_type_ second;
    };

    static const phone_class_ phone;
  };

  template <typename A>
  const typename query_columns< ::person, id_mssql, A >::email_class_::recipient_type_
  query_columns< ::person, id_mssql, A >::email_class_::
  recipient (A::table_name, "[email_recipient]", 0, 256);

  template <typename A>
  const typename query_columns< ::person, id_mssql, A >::email_class_::domain_type_
  query_columns< ::person, id_mssql, A >::email_class_::
  domain (A::table_name, "[email_domain]", 0, 256);

  template <typename A>
  const typename query_columns< ::person, id_mssql, A >::email_class_
  query_columns< ::person, id_mssql, A >::email;

  template <typename A>
  const typename query_columns< ::person, id_mssql, A >::name_class_::first_type_
  query_columns< ::person, id_mssql, A >::name_class_::
  first (A::table_name, "[name_first]", 0, 512);

  template <typename A>
  const typename query_columns< ::person, id_mssql, A >::name_class_::last_type_
  query_columns< ::person, id_mssql, A >::name_class_::
  last (A::table_name, "[name_last]", 0, 512);

  template <typename A>
  const typename query_columns< ::person, id_mssql, A >::name_class_::title_type_
  query_columns< ::person, id_mssql, A >::name_class_::
  title (A::table_name, "[name_title]", 0, 512);

  template <typename A>
  const typename query_columns< ::person, id_mssql, A >::name_class_::extras_class_1_::nickname_type_
  query_columns< ::person, id_mssql, A >::name_class_::extras_class_1_::
  nickname (A::table_name, "[name_extras_nickname]", 0, 512);

  template <typename A>
  const typename query_columns< ::person, id_mssql, A >::name_class_::extras_class_1_
  query_columns< ::person, id_mssql, A >::name_class_::extras;

  template <typename A>
  const typename query_columns< ::person, id_mssql, A >::name_class_
  query_columns< ::person, id_mssql, A >::name;

  template <typename A>
  const typename query_columns< ::person, id_mssql, A >::phone_class_::first_type_
  query_columns< ::person, id_mssql, A >::phone_class_::
  first (A::table_name, "[phone_first]", 0, 512);

  template <typename A>
  const typename query_columns< ::person, id_mssql, A >::phone_class_::second_type_
  query_columns< ::person, id_mssql, A >::phone_class_::
  second (A::table_name, "[phone_second]", 0, 512);

  template <typename A>
  const typename query_columns< ::person, id_mssql, A >::phone_class_
  query_columns< ::person, id_mssql, A >::phone;

  template <typename A>
  struct pointer_query_columns< ::person, id_mssql, A >:
    query_columns< ::person, id_mssql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::person, id_mssql >:
    public access::object_traits< ::person >
  {
    public:
    static const std::size_t batch = 1UL;

    static const bool rowversion = false;

    struct id_image_type
    {
      composite_value_traits< ::email_address, id_mssql >::image_type id_value;

      std::size_t version;
    };

    struct image_type
    {
      // email_
      //
      composite_value_traits< ::email_address, id_mssql >::image_type email_value;

      // name_
      //
      composite_value_traits< ::person::name_type, id_mssql >::image_type name_value;

      // phone_
      //
      composite_value_traits< ::phone_numbers, id_mssql >::image_type phone_value;

      std::size_t version;

      mssql::change_callback change_callback_;

      mssql::change_callback*
      change_callback ()
      {
        return &change_callback_;
      }
    };

    struct extra_statement_cache_type;

    // aliases_
    //
    struct name_extras_aliases_traits: access::composite_value_traits< ::name_extras, id_mssql >::aliases_traits
    {
      static const std::size_t id_column_count = 2UL;
      static const std::size_t data_column_count = 5UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static void
    bind (mssql::bind*,
          image_type&,
          mssql::statement_kind);

    static void
    bind (mssql::bind*, id_image_type&);

    static void
    init (image_type&,
          const object_type&,
          mssql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mssql::object_statements<object_type> statements_type;

    typedef mssql::query_base query_base_type;

    static const std::size_t column_count = 8UL;
    static const std::size_t id_column_count = 2UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::person, id_common >:
    public access::object_traits_impl< ::person, id_mssql >
  {
  };

  // person
  //
}

#include "person-odb.ixx"

#include <odb/post.hxx>

#endif // PERSON_ODB_HXX
