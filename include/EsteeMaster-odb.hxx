// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef ESTEE_MASTER_ODB_HXX
#define ESTEE_MASTER_ODB_HXX

// Begin prologue.
//
#include <odb/boost/version.hxx>
#if ODB_BOOST_VERSION != 2040000 // 2.4.0
#  error ODB and C++ compilers see different libodb-boost interface versions
#endif
#include <boost/shared_ptr.hpp>
#include <odb/boost/smart-ptr/pointer-traits.hxx>
#include <odb/boost/smart-ptr/wrapper-traits.hxx>
#include <odb/boost/optional/wrapper-traits.hxx>
#include <odb/boost/unordered/container-traits.hxx>
#include <odb/boost/date-time/mssql/gregorian-traits.hxx>
#include <odb/boost/date-time/mssql/posix-time-traits.hxx>
#include <odb/boost/multi-index/container-traits.hxx>
#include <odb/boost/uuid/mssql/uuid-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "EsteeMaster.h"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#ifdef BOOST_TR1_MEMORY_HPP_INCLUDED
#  include <odb/tr1/wrapper-traits.hxx>
#  include <odb/tr1/pointer-traits.hxx>
#endif
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>

#include <odb/details/unused.hxx>

namespace odb
{
  // EsteeMaster
  //
  template <>
  struct class_traits< ::EsteeMaster >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::EsteeMaster >
  {
    public:
    typedef ::EsteeMaster object_type;
    typedef ::boost::shared_ptr< ::EsteeMaster > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mssql/version.hxx>
#include <odb/mssql/forward.hxx>
#include <odb/mssql/binding.hxx>
#include <odb/mssql/mssql-types.hxx>

namespace odb
{
  // EsteeMaster
  //
  template <>
  class access::object_traits_impl< ::EsteeMaster, id_mssql >:
    public access::object_traits< ::EsteeMaster >
  {
    public:
    static const std::size_t batch = 1UL;

    static const bool rowversion = false;

    struct id_image_type
    {
      long long id_value;
      SQLLEN id_size_ind;

      std::size_t version;
    };

    struct image_type
    {
      // DataFeed_Ticker
      //
      char DataFeed_Ticker_value[513];
      SQLLEN DataFeed_Ticker_size_ind;

      // Underlying_Ticker
      //
      char Underlying_Ticker_value[513];
      SQLLEN Underlying_Ticker_size_ind;

      // ISIN
      //
      char ISIN_value[513];
      SQLLEN ISIN_size_ind;

      // Exchange_Code
      //
      char Exchange_Code_value[513];
      SQLLEN Exchange_Code_size_ind;

      // Option_Type
      //
      char Option_Type_value[513];
      SQLLEN Option_Type_size_ind;

      // Status
      //
      char Status_value[513];
      SQLLEN Status_size_ind;

      // TOKEN2
      //
      char TOKEN2_value[513];
      SQLLEN TOKEN2_size_ind;

      // Expiry_Date2
      //
      char Expiry_Date2_value[513];
      SQLLEN Expiry_Date2_size_ind;

      // SERIES
      //
      char SERIES_value[513];
      SQLLEN SERIES_size_ind;

      // Source
      //
      char Source_value[513];
      SQLLEN Source_size_ind;

      // UnderlyingEstee_Id
      //
      char UnderlyingEstee_Id_value[513];
      SQLLEN UnderlyingEstee_Id_size_ind;

      // Strike_Price
      //
      double Strike_Price_value;
      SQLLEN Strike_Price_size_ind;

      // Tick_Size
      //
      double Tick_Size_value;
      SQLLEN Tick_Size_size_ind;

      // Lot_Size
      //
      int Lot_Size_value;
      SQLLEN Lot_Size_size_ind;

      // Security_Type
      //
      int Security_Type_value;
      SQLLEN Security_Type_size_ind;

      // Token
      //
      int Token_value;
      SQLLEN Token_size_ind;

      // Quote_Size
      //
      int Quote_Size_value;
      SQLLEN Quote_Size_size_ind;

      // Instrument_Type
      //
      int Instrument_Type_value;
      SQLLEN Instrument_Type_size_ind;

      // TradingCurrency
      //
      int TradingCurrency_value;
      SQLLEN TradingCurrency_size_ind;

      // SettlementCurrency
      //
      int SettlementCurrency_value;
      SQLLEN SettlementCurrency_size_ind;

      // TickSizeSlabId
      //
      int TickSizeSlabId_value;
      SQLLEN TickSizeSlabId_size_ind;

      // AsOfDate
      //
      mssql::datetime AsOfDate_value;
      SQLLEN AsOfDate_size_ind;

      // Last_update_time
      //
      mssql::datetime Last_update_time_value;
      SQLLEN Last_update_time_size_ind;

      // Expiry_Date
      //
      mssql::datetime Expiry_Date_value;
      SQLLEN Expiry_Date_size_ind;

      // SettlementDate
      //
      mssql::datetime SettlementDate_value;
      SQLLEN SettlementDate_size_ind;

      // TradingStartDate
      //
      mssql::datetime TradingStartDate_value;
      SQLLEN TradingStartDate_size_ind;

      // LastTradingDate
      //
      mssql::datetime LastTradingDate_value;
      SQLLEN LastTradingDate_size_ind;

      // _id
      //
      long long _id_value;
      SQLLEN _id_size_ind;

      // Estee_ID
      //
      char Estee_ID_value[513];
      SQLLEN Estee_ID_size_ind;

      std::size_t version;

      mssql::change_callback*
      change_callback ()
      {
        return 0;
      }
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static void
    bind (mssql::bind*,
          image_type&,
          mssql::statement_kind);

    static void
    bind (mssql::bind*, id_image_type&);

    static void
    init (image_type&,
          const object_type&,
          mssql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mssql::object_statements<object_type> statements_type;

    static const std::size_t column_count = 29UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::EsteeMaster, id_common >:
    public access::object_traits_impl< ::EsteeMaster, id_mssql >
  {
  };
}

#include "EsteeMaster-odb.ixx"

#include <odb/post.hxx>

#endif // ESTEE_MASTER_ODB_HXX
