// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef CLOSING_PRICE_ODB_HXX
#define CLOSING_PRICE_ODB_HXX

// Begin prologue.
//
#include <odb/boost/version.hxx>
#if ODB_BOOST_VERSION != 2040000 // 2.4.0
#  error ODB and C++ compilers see different libodb-boost interface versions
#endif
#include <boost/shared_ptr.hpp>
#include <odb/boost/smart-ptr/pointer-traits.hxx>
#include <odb/boost/smart-ptr/wrapper-traits.hxx>
#include <odb/boost/optional/wrapper-traits.hxx>
#include <odb/boost/unordered/container-traits.hxx>
#include <odb/boost/multi-index/container-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "ClosingPrice.h"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#ifdef BOOST_TR1_MEMORY_HPP_INCLUDED
#  include <odb/tr1/wrapper-traits.hxx>
#  include <odb/tr1/pointer-traits.hxx>
#endif
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/query-dynamic.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // closingPrice
  //
  template <>
  struct class_traits< ::closingPrice >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::closingPrice >
  {
    public:
    typedef ::closingPrice object_type;
    typedef ::boost::shared_ptr< ::closingPrice > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::id id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  template <typename A>
  struct query_columns< ::closingPrice, id_common, A >
  {
    // Open_Interest
    //
    typedef odb::query_column< double > Open_Interest_type_;

    static Open_Interest_type_ Open_Interest;

    // Settlement_price
    //
    typedef odb::query_column< double > Settlement_price_type_;

    static Settlement_price_type_ Settlement_price;

    // Open_Price
    //
    typedef odb::query_column< double > Open_Price_type_;

    static Open_Price_type_ Open_Price;

    // High_Price
    //
    typedef odb::query_column< double > High_Price_type_;

    static High_Price_type_ High_Price;

    // Low_Price
    //
    typedef odb::query_column< double > Low_Price_type_;

    static Low_Price_type_ Low_Price;

    // Close_Price
    //
    typedef odb::query_column< double > Close_Price_type_;

    static Close_Price_type_ Close_Price;

    // Volume
    //
    typedef odb::query_column< double > Volume_type_;

    static Volume_type_ Volume;

    // Net_Traded_Val
    //
    typedef odb::query_column< double > Net_Traded_Val_type_;

    static Net_Traded_Val_type_ Net_Traded_Val;

    // Trades
    //
    typedef odb::query_column< int > Trades_type_;

    static Trades_type_ Trades;

    // Source
    //
    typedef odb::query_column< ::std::string > Source_type_;

    static Source_type_ Source;

    // id
    //
    struct id_class_
    {
      // Date
      //
      typedef odb::query_column< ::boost::posix_time::ptime > Date_type_;

      static Date_type_ Date;

      // Estee_ID
      //
      typedef odb::query_column< ::std::string > Estee_ID_type_;

      static Estee_ID_type_ Estee_ID;
    };

    static id_class_ id;
  };

#ifdef ODB_COMMON_QUERY_COLUMNS_DEF

  template <typename A>
  typename query_columns< ::closingPrice, id_common, A >::Open_Interest_type_
  query_columns< ::closingPrice, id_common, A >::Open_Interest;

  template <typename A>
  typename query_columns< ::closingPrice, id_common, A >::Settlement_price_type_
  query_columns< ::closingPrice, id_common, A >::Settlement_price;

  template <typename A>
  typename query_columns< ::closingPrice, id_common, A >::Open_Price_type_
  query_columns< ::closingPrice, id_common, A >::Open_Price;

  template <typename A>
  typename query_columns< ::closingPrice, id_common, A >::High_Price_type_
  query_columns< ::closingPrice, id_common, A >::High_Price;

  template <typename A>
  typename query_columns< ::closingPrice, id_common, A >::Low_Price_type_
  query_columns< ::closingPrice, id_common, A >::Low_Price;

  template <typename A>
  typename query_columns< ::closingPrice, id_common, A >::Close_Price_type_
  query_columns< ::closingPrice, id_common, A >::Close_Price;

  template <typename A>
  typename query_columns< ::closingPrice, id_common, A >::Volume_type_
  query_columns< ::closingPrice, id_common, A >::Volume;

  template <typename A>
  typename query_columns< ::closingPrice, id_common, A >::Net_Traded_Val_type_
  query_columns< ::closingPrice, id_common, A >::Net_Traded_Val;

  template <typename A>
  typename query_columns< ::closingPrice, id_common, A >::Trades_type_
  query_columns< ::closingPrice, id_common, A >::Trades;

  template <typename A>
  typename query_columns< ::closingPrice, id_common, A >::Source_type_
  query_columns< ::closingPrice, id_common, A >::Source;

  template <typename A>
  typename query_columns< ::closingPrice, id_common, A >::id_class_::Date_type_
  query_columns< ::closingPrice, id_common, A >::id_class_::Date;

  template <typename A>
  typename query_columns< ::closingPrice, id_common, A >::id_class_::Estee_ID_type_
  query_columns< ::closingPrice, id_common, A >::id_class_::Estee_ID;

  template <typename A>
  typename query_columns< ::closingPrice, id_common, A >::id_class_
  query_columns< ::closingPrice, id_common, A >::id;

#endif // ODB_COMMON_QUERY_COLUMNS_DEF

  template <typename A>
  struct pointer_query_columns< ::closingPrice, id_common, A >:
    query_columns< ::closingPrice, id_common, A >
  {
  };

  template <>
  class access::object_traits_impl< ::closingPrice, id_common >:
    public access::object_traits< ::closingPrice >
  {
    public:
    typedef odb::query_base query_base_type;

    struct function_table_type
    {
      void (*persist) (database&, const object_type&);
      pointer_type (*find1) (database&, const id_type&);
      bool (*find2) (database&, const id_type&, object_type&);
      bool (*reload) (database&, object_type&);
      void (*update) (database&, const object_type&);
      void (*erase1) (database&, const id_type&);
      void (*erase2) (database&, const object_type&);
      result<object_type> (*query) (database&, const query_base_type&);
      unsigned long long (*erase_query) (database&, const query_base_type&);
    };

    static const function_table_type* function_table[database_count];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);
  };

  // closingPrice
  //
}

#include "ClosingPrice-odb.ixx"

#include <odb/post.hxx>

#endif // CLOSING_PRICE_ODB_HXX
