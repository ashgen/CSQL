// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef ESTEE_MASTER_ODB_SQLITE_HXX
#define ESTEE_MASTER_ODB_SQLITE_HXX

// Begin prologue.
//
#include <odb/boost/version.hxx>
#if ODB_BOOST_VERSION != 2040000 // 2.4.0
#  error ODB and C++ compilers see different libodb-boost interface versions
#endif
#include <boost/shared_ptr.hpp>
#include <odb/boost/smart-ptr/pointer-traits.hxx>
#include <odb/boost/smart-ptr/wrapper-traits.hxx>
#include <odb/boost/optional/wrapper-traits.hxx>
#include <odb/boost/unordered/container-traits.hxx>
#include <odb/boost/date-time/sqlite/gregorian-traits.hxx>
#include <odb/boost/date-time/sqlite/posix-time-traits.hxx>
#include <odb/boost/multi-index/container-traits.hxx>
#include <odb/boost/uuid/sqlite/uuid-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "EsteeMaster.h"

#include "EsteeMaster-odb.hxx"

#include <odb/details/buffer.hxx>

#include <odb/sqlite/version.hxx>
#include <odb/sqlite/forward.hxx>
#include <odb/sqlite/binding.hxx>
#include <odb/sqlite/sqlite-types.hxx>
#include <odb/sqlite/query.hxx>
#include <odb/sqlite/query-dynamic.hxx>

namespace odb
{
  // EsteeMaster
  //
  template <typename A>
  struct query_columns< ::EsteeMaster, id_sqlite, A >
  {
    // DataFeed_Ticker
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    DataFeed_Ticker_type_;

    static const DataFeed_Ticker_type_ DataFeed_Ticker;

    // Underlying_Ticker
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    Underlying_Ticker_type_;

    static const Underlying_Ticker_type_ Underlying_Ticker;

    // ISIN
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    ISIN_type_;

    static const ISIN_type_ ISIN;

    // Exchange_Code
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    Exchange_Code_type_;

    static const Exchange_Code_type_ Exchange_Code;

    // Option_Type
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    Option_Type_type_;

    static const Option_Type_type_ Option_Type;

    // Status
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    Status_type_;

    static const Status_type_ Status;

    // TOKEN2
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    TOKEN2_type_;

    static const TOKEN2_type_ TOKEN2;

    // Expiry_Date2
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    Expiry_Date2_type_;

    static const Expiry_Date2_type_ Expiry_Date2;

    // SERIES
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    SERIES_type_;

    static const SERIES_type_ SERIES;

    // Source
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    Source_type_;

    static const Source_type_ Source;

    // UnderlyingEstee_Id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    UnderlyingEstee_Id_type_;

    static const UnderlyingEstee_Id_type_ UnderlyingEstee_Id;

    // Strike_Price
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    Strike_Price_type_;

    static const Strike_Price_type_ Strike_Price;

    // Tick_Size
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    Tick_Size_type_;

    static const Tick_Size_type_ Tick_Size;

    // Lot_Size
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    Lot_Size_type_;

    static const Lot_Size_type_ Lot_Size;

    // Security_Type
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    Security_Type_type_;

    static const Security_Type_type_ Security_Type;

    // Token
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    Token_type_;

    static const Token_type_ Token;

    // Quote_Size
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    Quote_Size_type_;

    static const Quote_Size_type_ Quote_Size;

    // Instrument_Type
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    Instrument_Type_type_;

    static const Instrument_Type_type_ Instrument_Type;

    // TradingCurrency
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    TradingCurrency_type_;

    static const TradingCurrency_type_ TradingCurrency;

    // SettlementCurrency
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    SettlementCurrency_type_;

    static const SettlementCurrency_type_ SettlementCurrency;

    // TickSizeSlabId
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    TickSizeSlabId_type_;

    static const TickSizeSlabId_type_ TickSizeSlabId;

    // AsOfDate
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::boost::posix_time::ptime,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    AsOfDate_type_;

    static const AsOfDate_type_ AsOfDate;

    // Last_update_time
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::boost::posix_time::ptime,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    Last_update_time_type_;

    static const Last_update_time_type_ Last_update_time;

    // Expiry_Date
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::boost::posix_time::ptime,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    Expiry_Date_type_;

    static const Expiry_Date_type_ Expiry_Date;

    // SettlementDate
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::boost::posix_time::ptime,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    SettlementDate_type_;

    static const SettlementDate_type_ SettlementDate;

    // TradingStartDate
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::boost::posix_time::ptime,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    TradingStartDate_type_;

    static const TradingStartDate_type_ TradingStartDate;

    // LastTradingDate
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::boost::posix_time::ptime,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    LastTradingDate_type_;

    static const LastTradingDate_type_ LastTradingDate;

    // Estee_ID
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    Estee_ID_type_;

    static const Estee_ID_type_ Estee_ID;
  };

#ifdef ODB_SQLITE_QUERY_COLUMNS_DEF

  template <typename A>
  const typename query_columns< ::EsteeMaster, id_sqlite, A >::DataFeed_Ticker_type_
  query_columns< ::EsteeMaster, id_sqlite, A >::
  DataFeed_Ticker (query_columns< ::EsteeMaster, id_common, typename A::common_traits >::DataFeed_Ticker,
                   A::table_name, "\"DataFeed_Ticker\"", 0);

  template <typename A>
  const typename query_columns< ::EsteeMaster, id_sqlite, A >::Underlying_Ticker_type_
  query_columns< ::EsteeMaster, id_sqlite, A >::
  Underlying_Ticker (query_columns< ::EsteeMaster, id_common, typename A::common_traits >::Underlying_Ticker,
                     A::table_name, "\"Underlying_Ticker\"", 0);

  template <typename A>
  const typename query_columns< ::EsteeMaster, id_sqlite, A >::ISIN_type_
  query_columns< ::EsteeMaster, id_sqlite, A >::
  ISIN (query_columns< ::EsteeMaster, id_common, typename A::common_traits >::ISIN,
        A::table_name, "\"ISIN\"", 0);

  template <typename A>
  const typename query_columns< ::EsteeMaster, id_sqlite, A >::Exchange_Code_type_
  query_columns< ::EsteeMaster, id_sqlite, A >::
  Exchange_Code (query_columns< ::EsteeMaster, id_common, typename A::common_traits >::Exchange_Code,
                 A::table_name, "\"Exchange_Code\"", 0);

  template <typename A>
  const typename query_columns< ::EsteeMaster, id_sqlite, A >::Option_Type_type_
  query_columns< ::EsteeMaster, id_sqlite, A >::
  Option_Type (query_columns< ::EsteeMaster, id_common, typename A::common_traits >::Option_Type,
               A::table_name, "\"Option_Type\"", 0);

  template <typename A>
  const typename query_columns< ::EsteeMaster, id_sqlite, A >::Status_type_
  query_columns< ::EsteeMaster, id_sqlite, A >::
  Status (query_columns< ::EsteeMaster, id_common, typename A::common_traits >::Status,
          A::table_name, "\"Status\"", 0);

  template <typename A>
  const typename query_columns< ::EsteeMaster, id_sqlite, A >::TOKEN2_type_
  query_columns< ::EsteeMaster, id_sqlite, A >::
  TOKEN2 (query_columns< ::EsteeMaster, id_common, typename A::common_traits >::TOKEN2,
          A::table_name, "\"TOKEN2\"", 0);

  template <typename A>
  const typename query_columns< ::EsteeMaster, id_sqlite, A >::Expiry_Date2_type_
  query_columns< ::EsteeMaster, id_sqlite, A >::
  Expiry_Date2 (query_columns< ::EsteeMaster, id_common, typename A::common_traits >::Expiry_Date2,
                A::table_name, "\"Expiry_Date2\"", 0);

  template <typename A>
  const typename query_columns< ::EsteeMaster, id_sqlite, A >::SERIES_type_
  query_columns< ::EsteeMaster, id_sqlite, A >::
  SERIES (query_columns< ::EsteeMaster, id_common, typename A::common_traits >::SERIES,
          A::table_name, "\"SERIES\"", 0);

  template <typename A>
  const typename query_columns< ::EsteeMaster, id_sqlite, A >::Source_type_
  query_columns< ::EsteeMaster, id_sqlite, A >::
  Source (query_columns< ::EsteeMaster, id_common, typename A::common_traits >::Source,
          A::table_name, "\"Source\"", 0);

  template <typename A>
  const typename query_columns< ::EsteeMaster, id_sqlite, A >::UnderlyingEstee_Id_type_
  query_columns< ::EsteeMaster, id_sqlite, A >::
  UnderlyingEstee_Id (query_columns< ::EsteeMaster, id_common, typename A::common_traits >::UnderlyingEstee_Id,
                      A::table_name, "\"UnderlyingEstee_Id\"", 0);

  template <typename A>
  const typename query_columns< ::EsteeMaster, id_sqlite, A >::Strike_Price_type_
  query_columns< ::EsteeMaster, id_sqlite, A >::
  Strike_Price (query_columns< ::EsteeMaster, id_common, typename A::common_traits >::Strike_Price,
                A::table_name, "\"Strike_Price\"", 0);

  template <typename A>
  const typename query_columns< ::EsteeMaster, id_sqlite, A >::Tick_Size_type_
  query_columns< ::EsteeMaster, id_sqlite, A >::
  Tick_Size (query_columns< ::EsteeMaster, id_common, typename A::common_traits >::Tick_Size,
             A::table_name, "\"Tick_Size\"", 0);

  template <typename A>
  const typename query_columns< ::EsteeMaster, id_sqlite, A >::Lot_Size_type_
  query_columns< ::EsteeMaster, id_sqlite, A >::
  Lot_Size (query_columns< ::EsteeMaster, id_common, typename A::common_traits >::Lot_Size,
            A::table_name, "\"Lot_Size\"", 0);

  template <typename A>
  const typename query_columns< ::EsteeMaster, id_sqlite, A >::Security_Type_type_
  query_columns< ::EsteeMaster, id_sqlite, A >::
  Security_Type (query_columns< ::EsteeMaster, id_common, typename A::common_traits >::Security_Type,
                 A::table_name, "\"Security_Type\"", 0);

  template <typename A>
  const typename query_columns< ::EsteeMaster, id_sqlite, A >::Token_type_
  query_columns< ::EsteeMaster, id_sqlite, A >::
  Token (query_columns< ::EsteeMaster, id_common, typename A::common_traits >::Token,
         A::table_name, "\"Token\"", 0);

  template <typename A>
  const typename query_columns< ::EsteeMaster, id_sqlite, A >::Quote_Size_type_
  query_columns< ::EsteeMaster, id_sqlite, A >::
  Quote_Size (query_columns< ::EsteeMaster, id_common, typename A::common_traits >::Quote_Size,
              A::table_name, "\"Quote_Size\"", 0);

  template <typename A>
  const typename query_columns< ::EsteeMaster, id_sqlite, A >::Instrument_Type_type_
  query_columns< ::EsteeMaster, id_sqlite, A >::
  Instrument_Type (query_columns< ::EsteeMaster, id_common, typename A::common_traits >::Instrument_Type,
                   A::table_name, "\"Instrument_Type\"", 0);

  template <typename A>
  const typename query_columns< ::EsteeMaster, id_sqlite, A >::TradingCurrency_type_
  query_columns< ::EsteeMaster, id_sqlite, A >::
  TradingCurrency (query_columns< ::EsteeMaster, id_common, typename A::common_traits >::TradingCurrency,
                   A::table_name, "\"TradingCurrency\"", 0);

  template <typename A>
  const typename query_columns< ::EsteeMaster, id_sqlite, A >::SettlementCurrency_type_
  query_columns< ::EsteeMaster, id_sqlite, A >::
  SettlementCurrency (query_columns< ::EsteeMaster, id_common, typename A::common_traits >::SettlementCurrency,
                      A::table_name, "\"SettlementCurrency\"", 0);

  template <typename A>
  const typename query_columns< ::EsteeMaster, id_sqlite, A >::TickSizeSlabId_type_
  query_columns< ::EsteeMaster, id_sqlite, A >::
  TickSizeSlabId (query_columns< ::EsteeMaster, id_common, typename A::common_traits >::TickSizeSlabId,
                  A::table_name, "\"TickSizeSlabId\"", 0);

  template <typename A>
  const typename query_columns< ::EsteeMaster, id_sqlite, A >::AsOfDate_type_
  query_columns< ::EsteeMaster, id_sqlite, A >::
  AsOfDate (query_columns< ::EsteeMaster, id_common, typename A::common_traits >::AsOfDate,
            A::table_name, "\"AsOfDate\"", 0);

  template <typename A>
  const typename query_columns< ::EsteeMaster, id_sqlite, A >::Last_update_time_type_
  query_columns< ::EsteeMaster, id_sqlite, A >::
  Last_update_time (query_columns< ::EsteeMaster, id_common, typename A::common_traits >::Last_update_time,
                    A::table_name, "\"Last_update_time\"", 0);

  template <typename A>
  const typename query_columns< ::EsteeMaster, id_sqlite, A >::Expiry_Date_type_
  query_columns< ::EsteeMaster, id_sqlite, A >::
  Expiry_Date (query_columns< ::EsteeMaster, id_common, typename A::common_traits >::Expiry_Date,
               A::table_name, "\"Expiry_Date\"", 0);

  template <typename A>
  const typename query_columns< ::EsteeMaster, id_sqlite, A >::SettlementDate_type_
  query_columns< ::EsteeMaster, id_sqlite, A >::
  SettlementDate (query_columns< ::EsteeMaster, id_common, typename A::common_traits >::SettlementDate,
                  A::table_name, "\"SettlementDate\"", 0);

  template <typename A>
  const typename query_columns< ::EsteeMaster, id_sqlite, A >::TradingStartDate_type_
  query_columns< ::EsteeMaster, id_sqlite, A >::
  TradingStartDate (query_columns< ::EsteeMaster, id_common, typename A::common_traits >::TradingStartDate,
                    A::table_name, "\"TradingStartDate\"", 0);

  template <typename A>
  const typename query_columns< ::EsteeMaster, id_sqlite, A >::LastTradingDate_type_
  query_columns< ::EsteeMaster, id_sqlite, A >::
  LastTradingDate (query_columns< ::EsteeMaster, id_common, typename A::common_traits >::LastTradingDate,
                   A::table_name, "\"LastTradingDate\"", 0);

  template <typename A>
  const typename query_columns< ::EsteeMaster, id_sqlite, A >::Estee_ID_type_
  query_columns< ::EsteeMaster, id_sqlite, A >::
  Estee_ID (query_columns< ::EsteeMaster, id_common, typename A::common_traits >::Estee_ID,
            A::table_name, "\"Estee_ID\"", 0);

#endif // ODB_SQLITE_QUERY_COLUMNS_DEF

  template <typename A>
  struct pointer_query_columns< ::EsteeMaster, id_sqlite, A >:
    query_columns< ::EsteeMaster, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::EsteeMaster, id_sqlite >:
    public access::object_traits< ::EsteeMaster >
  {
    public:
    typedef access::object_traits_impl< ::EsteeMaster, id_common > common_traits;

    struct id_image_type
    {
      details::buffer id_value;
      std::size_t id_size;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // DataFeed_Ticker
      //
      details::buffer DataFeed_Ticker_value;
      std::size_t DataFeed_Ticker_size;
      bool DataFeed_Ticker_null;

      // Underlying_Ticker
      //
      details::buffer Underlying_Ticker_value;
      std::size_t Underlying_Ticker_size;
      bool Underlying_Ticker_null;

      // ISIN
      //
      details::buffer ISIN_value;
      std::size_t ISIN_size;
      bool ISIN_null;

      // Exchange_Code
      //
      details::buffer Exchange_Code_value;
      std::size_t Exchange_Code_size;
      bool Exchange_Code_null;

      // Option_Type
      //
      details::buffer Option_Type_value;
      std::size_t Option_Type_size;
      bool Option_Type_null;

      // Status
      //
      details::buffer Status_value;
      std::size_t Status_size;
      bool Status_null;

      // TOKEN2
      //
      details::buffer TOKEN2_value;
      std::size_t TOKEN2_size;
      bool TOKEN2_null;

      // Expiry_Date2
      //
      details::buffer Expiry_Date2_value;
      std::size_t Expiry_Date2_size;
      bool Expiry_Date2_null;

      // SERIES
      //
      details::buffer SERIES_value;
      std::size_t SERIES_size;
      bool SERIES_null;

      // Source
      //
      details::buffer Source_value;
      std::size_t Source_size;
      bool Source_null;

      // UnderlyingEstee_Id
      //
      details::buffer UnderlyingEstee_Id_value;
      std::size_t UnderlyingEstee_Id_size;
      bool UnderlyingEstee_Id_null;

      // Strike_Price
      //
      double Strike_Price_value;
      bool Strike_Price_null;

      // Tick_Size
      //
      double Tick_Size_value;
      bool Tick_Size_null;

      // Lot_Size
      //
      long long Lot_Size_value;
      bool Lot_Size_null;

      // Security_Type
      //
      long long Security_Type_value;
      bool Security_Type_null;

      // Token
      //
      long long Token_value;
      bool Token_null;

      // Quote_Size
      //
      long long Quote_Size_value;
      bool Quote_Size_null;

      // Instrument_Type
      //
      long long Instrument_Type_value;
      bool Instrument_Type_null;

      // TradingCurrency
      //
      long long TradingCurrency_value;
      bool TradingCurrency_null;

      // SettlementCurrency
      //
      long long SettlementCurrency_value;
      bool SettlementCurrency_null;

      // TickSizeSlabId
      //
      long long TickSizeSlabId_value;
      bool TickSizeSlabId_null;

      // AsOfDate
      //
      details::buffer AsOfDate_value;
      std::size_t AsOfDate_size;
      bool AsOfDate_null;

      // Last_update_time
      //
      details::buffer Last_update_time_value;
      std::size_t Last_update_time_size;
      bool Last_update_time_null;

      // Expiry_Date
      //
      details::buffer Expiry_Date_value;
      std::size_t Expiry_Date_size;
      bool Expiry_Date_null;

      // SettlementDate
      //
      details::buffer SettlementDate_value;
      std::size_t SettlementDate_size;
      bool SettlementDate_null;

      // TradingStartDate
      //
      details::buffer TradingStartDate_value;
      std::size_t TradingStartDate_size;
      bool TradingStartDate_null;

      // LastTradingDate
      //
      details::buffer LastTradingDate_value;
      std::size_t LastTradingDate_size;
      bool LastTradingDate_null;

      // Estee_ID
      //
      details::buffer Estee_ID_value;
      std::size_t Estee_ID_size;
      bool Estee_ID_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 28UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static result<object_type>
    query (database&, const odb::query_base&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const odb::query_base&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  // EsteeMaster
  //
}

#include "EsteeMaster-odb-sqlite.ixx"

#include <odb/post.hxx>

#endif // ESTEE_MASTER_ODB_SQLITE_HXX
