// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef CLOSING_PRICE_ODB_MYSQL_HXX
#define CLOSING_PRICE_ODB_MYSQL_HXX

// Begin prologue.
//
#include <odb/boost/version.hxx>
#if ODB_BOOST_VERSION != 2040000 // 2.4.0
#  error ODB and C++ compilers see different libodb-boost interface versions
#endif
#include <boost/shared_ptr.hpp>
#include <odb/boost/smart-ptr/pointer-traits.hxx>
#include <odb/boost/smart-ptr/wrapper-traits.hxx>
#include <odb/boost/optional/wrapper-traits.hxx>
#include <odb/boost/unordered/container-traits.hxx>
#include <odb/boost/date-time/mysql/gregorian-traits.hxx>
#include <odb/boost/date-time/mysql/posix-time-traits.hxx>
#include <odb/boost/multi-index/container-traits.hxx>
#include <odb/boost/uuid/mysql/uuid-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "ClosingPrice.h"

#include "ClosingPrice-odb.hxx"

#include <odb/details/buffer.hxx>

#include <odb/mysql/version.hxx>
#include <odb/mysql/forward.hxx>
#include <odb/mysql/binding.hxx>
#include <odb/mysql/mysql-types.hxx>
#include <odb/mysql/query.hxx>
#include <odb/mysql/query-dynamic.hxx>

namespace odb
{
  // id
  //
  template <>
  class access::composite_value_traits< ::id, id_mysql >
  {
    public:
    typedef ::id value_type;

    struct image_type
    {
      // Date
      //
      MYSQL_TIME Date_value;
      my_bool Date_null;

      // Estee_ID
      //
      details::buffer Estee_ID_value;
      unsigned long Estee_ID_size;
      my_bool Estee_ID_null;
    };

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          mysql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              mysql::statement_kind);

    static const std::size_t column_count = 2UL;
  };

  // closingPrice
  //
  template <typename A>
  struct query_columns< ::closingPrice, id_mysql, A >
  {
    // Open_Interest
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        double,
        mysql::id_double >::query_type,
      mysql::id_double >
    Open_Interest_type_;

    static const Open_Interest_type_ Open_Interest;

    // Settlement_price
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        double,
        mysql::id_double >::query_type,
      mysql::id_double >
    Settlement_price_type_;

    static const Settlement_price_type_ Settlement_price;

    // Open_Price
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        double,
        mysql::id_double >::query_type,
      mysql::id_double >
    Open_Price_type_;

    static const Open_Price_type_ Open_Price;

    // High_Price
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        double,
        mysql::id_double >::query_type,
      mysql::id_double >
    High_Price_type_;

    static const High_Price_type_ High_Price;

    // Low_Price
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        double,
        mysql::id_double >::query_type,
      mysql::id_double >
    Low_Price_type_;

    static const Low_Price_type_ Low_Price;

    // Close_Price
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        double,
        mysql::id_double >::query_type,
      mysql::id_double >
    Close_Price_type_;

    static const Close_Price_type_ Close_Price;

    // Volume
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        double,
        mysql::id_double >::query_type,
      mysql::id_double >
    Volume_type_;

    static const Volume_type_ Volume;

    // Net_Traded_Val
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        double,
        mysql::id_double >::query_type,
      mysql::id_double >
    Net_Traded_Val_type_;

    static const Net_Traded_Val_type_ Net_Traded_Val;

    // Trades
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        int,
        mysql::id_long >::query_type,
      mysql::id_long >
    Trades_type_;

    static const Trades_type_ Trades;

    // Source
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    Source_type_;

    static const Source_type_ Source;

    // id
    //
    struct id_class_
    {
      id_class_ ()
      {
      }

      // Date
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::query_type,
        mysql::id_datetime >
      Date_type_;

      static const Date_type_ Date;

      // Estee_ID
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::std::string,
          mysql::id_string >::query_type,
        mysql::id_string >
      Estee_ID_type_;

      static const Estee_ID_type_ Estee_ID;
    };

    static const id_class_ id;
  };

#ifdef ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  const typename query_columns< ::closingPrice, id_mysql, A >::Open_Interest_type_
  query_columns< ::closingPrice, id_mysql, A >::
  Open_Interest (query_columns< ::closingPrice, id_common, typename A::common_traits >::Open_Interest,
                 A::table_name, "`Open_Interest`", 0);

  template <typename A>
  const typename query_columns< ::closingPrice, id_mysql, A >::Settlement_price_type_
  query_columns< ::closingPrice, id_mysql, A >::
  Settlement_price (query_columns< ::closingPrice, id_common, typename A::common_traits >::Settlement_price,
                    A::table_name, "`Settlement_price`", 0);

  template <typename A>
  const typename query_columns< ::closingPrice, id_mysql, A >::Open_Price_type_
  query_columns< ::closingPrice, id_mysql, A >::
  Open_Price (query_columns< ::closingPrice, id_common, typename A::common_traits >::Open_Price,
              A::table_name, "`Open_Price`", 0);

  template <typename A>
  const typename query_columns< ::closingPrice, id_mysql, A >::High_Price_type_
  query_columns< ::closingPrice, id_mysql, A >::
  High_Price (query_columns< ::closingPrice, id_common, typename A::common_traits >::High_Price,
              A::table_name, "`High_Price`", 0);

  template <typename A>
  const typename query_columns< ::closingPrice, id_mysql, A >::Low_Price_type_
  query_columns< ::closingPrice, id_mysql, A >::
  Low_Price (query_columns< ::closingPrice, id_common, typename A::common_traits >::Low_Price,
             A::table_name, "`Low_Price`", 0);

  template <typename A>
  const typename query_columns< ::closingPrice, id_mysql, A >::Close_Price_type_
  query_columns< ::closingPrice, id_mysql, A >::
  Close_Price (query_columns< ::closingPrice, id_common, typename A::common_traits >::Close_Price,
               A::table_name, "`Close_Price`", 0);

  template <typename A>
  const typename query_columns< ::closingPrice, id_mysql, A >::Volume_type_
  query_columns< ::closingPrice, id_mysql, A >::
  Volume (query_columns< ::closingPrice, id_common, typename A::common_traits >::Volume,
          A::table_name, "`Volume`", 0);

  template <typename A>
  const typename query_columns< ::closingPrice, id_mysql, A >::Net_Traded_Val_type_
  query_columns< ::closingPrice, id_mysql, A >::
  Net_Traded_Val (query_columns< ::closingPrice, id_common, typename A::common_traits >::Net_Traded_Val,
                  A::table_name, "`Net_Traded_Val`", 0);

  template <typename A>
  const typename query_columns< ::closingPrice, id_mysql, A >::Trades_type_
  query_columns< ::closingPrice, id_mysql, A >::
  Trades (query_columns< ::closingPrice, id_common, typename A::common_traits >::Trades,
          A::table_name, "`Trades`", 0);

  template <typename A>
  const typename query_columns< ::closingPrice, id_mysql, A >::Source_type_
  query_columns< ::closingPrice, id_mysql, A >::
  Source (query_columns< ::closingPrice, id_common, typename A::common_traits >::Source,
          A::table_name, "`Source`", 0);

  template <typename A>
  const typename query_columns< ::closingPrice, id_mysql, A >::id_class_::Date_type_
  query_columns< ::closingPrice, id_mysql, A >::id_class_::
  Date (query_columns< ::closingPrice, id_common, typename A::common_traits >::id_class_::Date,
        A::table_name, "`Date`", 0);

  template <typename A>
  const typename query_columns< ::closingPrice, id_mysql, A >::id_class_::Estee_ID_type_
  query_columns< ::closingPrice, id_mysql, A >::id_class_::
  Estee_ID (query_columns< ::closingPrice, id_common, typename A::common_traits >::id_class_::Estee_ID,
            A::table_name, "`Estee_ID`", 0);

  template <typename A>
  const typename query_columns< ::closingPrice, id_mysql, A >::id_class_
  query_columns< ::closingPrice, id_mysql, A >::id;

#endif // ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  struct pointer_query_columns< ::closingPrice, id_mysql, A >:
    query_columns< ::closingPrice, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::closingPrice, id_mysql >:
    public access::object_traits< ::closingPrice >
  {
    public:
    typedef access::object_traits_impl< ::closingPrice, id_common > common_traits;

    struct id_image_type
    {
      composite_value_traits< ::id, id_mysql >::image_type id_value;

      std::size_t version;
    };

    struct image_type
    {
      // Open_Interest
      //
      double Open_Interest_value;
      my_bool Open_Interest_null;

      // Settlement_price
      //
      double Settlement_price_value;
      my_bool Settlement_price_null;

      // Open_Price
      //
      double Open_Price_value;
      my_bool Open_Price_null;

      // High_Price
      //
      double High_Price_value;
      my_bool High_Price_null;

      // Low_Price
      //
      double Low_Price_value;
      my_bool Low_Price_null;

      // Close_Price
      //
      double Close_Price_value;
      my_bool Close_Price_null;

      // Volume
      //
      double Volume_value;
      my_bool Volume_null;

      // Net_Traded_Val
      //
      double Net_Traded_Val_value;
      my_bool Net_Traded_Val_null;

      // Trades
      //
      int Trades_value;
      my_bool Trades_null;

      // Source
      //
      details::buffer Source_value;
      unsigned long Source_size;
      my_bool Source_null;

      // _id
      //
      composite_value_traits< ::id, id_mysql >::image_type _id_value;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 12UL;
    static const std::size_t id_column_count = 2UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static result<object_type>
    query (database&, const odb::query_base&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const odb::query_base&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  // closingPrice
  //
}

#include "ClosingPrice-odb-mysql.ixx"

#include <odb/post.hxx>

#endif // CLOSING_PRICE_ODB_MYSQL_HXX
